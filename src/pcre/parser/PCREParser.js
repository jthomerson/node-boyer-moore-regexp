// Generated from src/pcre/PCRE.g4 by ANTLR 4.5.1
// jshint ignore: start
var antlr4 = require('antlr4/index');
var PCREListener = require('./PCREListener').PCREListener;
var grammarFileName = "PCRE.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003\u007f\u039c\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0003\u0002\u0003\u0002\u0003\u0002\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0007\u0003S\n\u0003\f\u0003\u000e\u0003V\u000b",
    "\u0003\u0003\u0004\u0007\u0004Y\n\u0004\f\u0004\u000e\u0004\\\u000b",
    "\u0004\u0003\u0005\u0003\u0005\u0005\u0005`\n\u0005\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006z",
    "\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0005\u0007\u007f\n\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0006\b\u0086\n\b\r\b\u000e",
    "\b\u0087\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0003\b\u0007\b\u0090",
    "\n\b\f\b\u000e\b\u0093\u000b\b\u0003\b\u0003\b\u0003\b\u0003\b\u0006",
    "\b\u0099\n\b\r\b\u000e\b\u009a\u0003\b\u0003\b\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0006\b\u00a3\n\b\r\b\u000e\b\u00a4\u0003\b\u0003\b\u0003",
    "\b\u0003\b\u0003\b\u0007\b\u00ac\n\b\f\b\u000e\b\u00af\u000b\b\u0003",
    "\b\u0003\b\u0003\b\u0006\b\u00b4\n\b\r\b\u000e\b\u00b5\u0003\b\u0003",
    "\b\u0005\b\u00ba\n\b\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t",
    "\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003",
    "\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0003\t\u0005",
    "\t\u00e5\n\t\u0003\n\u0003\n\u0003\n\u0005\n\u00ea\n\n\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\u000b\u0005\u000b\u0109\n\u000b",
    "\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u011d\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0005\u000e\u015b\n\u000e\u0003\u000f\u0006\u000f\u015e\n\u000f\r\u000f",
    "\u000e\u000f\u015f\u0003\u0010\u0003\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0003\u0011\u0005",
    "\u0011\u017e\n\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0003\u0012\u0003\u0012\u0005\u0012\u01ce\n\u0012\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u01d8\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0005\u0013\u01e5\n\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01f2\n\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u0200\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u020e\n\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u021b\n",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u0227",
    "\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0005\u0013\u0235\n\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0246\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013",
    "\u0005\u0013\u0257\n\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003",
    "\u0013\u0005\u0013\u0263\n\u0013\u0003\u0013\u0003\u0013\u0005\u0013",
    "\u0267\n\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u0278",
    "\n\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0005\u0014\u0281\n\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003",
    "\u0014\u0005\u0014\u02cd\n\u0014\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015",
    "\u0003\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0005\u0015\u030c\n",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016\u0318",
    "\n\u0016\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u0334\n\u0017\u0003",
    "\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u033d\n\u0018\u0003\u0019\u0003\u0019\u0003\u001a",
    "\u0003\u001a\u0005\u001a\u0343\n\u001a\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001b\u0003\u001b\u0005\u001b\u0351\n\u001b",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0005\u001c\u036d\n\u001c\u0003\u001d\u0003",
    "\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0003",
    "\u001e\u0003\u001e\u0003\u001e\u0003\u001e\u0005\u001e\u037a\n\u001e",
    "\u0003\u001f\u0003\u001f\u0003 \u0006 \u037f\n \r \u000e \u0380\u0003",
    "!\u0003!\u0003\"\u0003\"\u0003#\u0003#\u0005#\u0389\n#\u0003#\u0003",
    "#\u0003#\u0007#\u038e\n#\f#\u000e#\u0391\u000b#\u0003$\u0006$\u0394",
    "\n$\r$\u000e$\u0395\u0003%\u0003%\u0003&\u0003&\u0003&\u0002\u0002\'",
    "\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c",
    "\u001e \"$&(*,.02468:<>@BDFHJ\u0002\t\b\u0002IIMMSSXXddoo\u0005\u0002",
    "\u0006\u0006\u0010\u001d#$\u0004\u0002uw~~\u0004\u0002u{~~\u0003\u0002",
    "u~\u0003\u000277\u0003\u0002At\u041f\u0002L\u0003\u0002\u0002\u0002",
    "\u0004O\u0003\u0002\u0002\u0002\u0006Z\u0003\u0002\u0002\u0002\b]\u0003",
    "\u0002\u0002\u0002\ny\u0003\u0002\u0002\u0002\f~\u0003\u0002\u0002\u0002",
    "\u000e\u00b9\u0003\u0002\u0002\u0002\u0010\u00e4\u0003\u0002\u0002\u0002",
    "\u0012\u00e9\u0003\u0002\u0002\u0002\u0014\u0108\u0003\u0002\u0002\u0002",
    "\u0016\u011c\u0003\u0002\u0002\u0002\u0018\u011e\u0003\u0002\u0002\u0002",
    "\u001a\u015a\u0003\u0002\u0002\u0002\u001c\u015d\u0003\u0002\u0002\u0002",
    "\u001e\u0161\u0003\u0002\u0002\u0002 \u017d\u0003\u0002\u0002\u0002",
    "\"\u01cd\u0003\u0002\u0002\u0002$\u0266\u0003\u0002\u0002\u0002&\u02cc",
    "\u0003\u0002\u0002\u0002(\u030b\u0003\u0002\u0002\u0002*\u0317\u0003",
    "\u0002\u0002\u0002,\u0333\u0003\u0002\u0002\u0002.\u033c\u0003\u0002",
    "\u0002\u00020\u033e\u0003\u0002\u0002\u00022\u0342\u0003\u0002\u0002",
    "\u00024\u0350\u0003\u0002\u0002\u00026\u036c\u0003\u0002\u0002\u0002",
    "8\u036e\u0003\u0002\u0002\u0002:\u0379\u0003\u0002\u0002\u0002<\u037b",
    "\u0003\u0002\u0002\u0002>\u037e\u0003\u0002\u0002\u0002@\u0382\u0003",
    "\u0002\u0002\u0002B\u0384\u0003\u0002\u0002\u0002D\u0388\u0003\u0002",
    "\u0002\u0002F\u0393\u0003\u0002\u0002\u0002H\u0397\u0003\u0002\u0002",
    "\u0002J\u0399\u0003\u0002\u0002\u0002LM\u0005\u0004\u0003\u0002MN\u0007",
    "\u0002\u0002\u0003N\u0003\u0003\u0002\u0002\u0002OT\u0005\u0006\u0004",
    "\u0002PQ\u00075\u0002\u0002QS\u0005\u0006\u0004\u0002RP\u0003\u0002",
    "\u0002\u0002SV\u0003\u0002\u0002\u0002TR\u0003\u0002\u0002\u0002TU\u0003",
    "\u0002\u0002\u0002U\u0005\u0003\u0002\u0002\u0002VT\u0003\u0002\u0002",
    "\u0002WY\u0005\b\u0005\u0002XW\u0003\u0002\u0002\u0002Y\\\u0003\u0002",
    "\u0002\u0002ZX\u0003\u0002\u0002\u0002Z[\u0003\u0002\u0002\u0002[\u0007",
    "\u0003\u0002\u0002\u0002\\Z\u0003\u0002\u0002\u0002]_\u0005,\u0017\u0002",
    "^`\u0005\n\u0006\u0002_^\u0003\u0002\u0002\u0002_`\u0003\u0002\u0002",
    "\u0002`\t\u0003\u0002\u0002\u0002ab\u0007%\u0002\u0002bz\u0005\f\u0007",
    "\u0002cd\u0007&\u0002\u0002dz\u0005\f\u0007\u0002ef\u0007\'\u0002\u0002",
    "fz\u0005\f\u0007\u0002gh\u0007(\u0002\u0002hi\u00058\u001d\u0002ij\u0007",
    ")\u0002\u0002jk\u0005\f\u0007\u0002kz\u0003\u0002\u0002\u0002lm\u0007",
    "(\u0002\u0002mn\u00058\u001d\u0002no\u0007*\u0002\u0002op\u0007)\u0002",
    "\u0002pq\u0005\f\u0007\u0002qz\u0003\u0002\u0002\u0002rs\u0007(\u0002",
    "\u0002st\u00058\u001d\u0002tu\u0007*\u0002\u0002uv\u00058\u001d\u0002",
    "vw\u0007)\u0002\u0002wx\u0005\f\u0007\u0002xz\u0003\u0002\u0002\u0002",
    "ya\u0003\u0002\u0002\u0002yc\u0003\u0002\u0002\u0002ye\u0003\u0002\u0002",
    "\u0002yg\u0003\u0002\u0002\u0002yl\u0003\u0002\u0002\u0002yr\u0003\u0002",
    "\u0002\u0002z\u000b\u0003\u0002\u0002\u0002{\u007f\u0007&\u0002\u0002",
    "|\u007f\u0007%\u0002\u0002}\u007f\u0003\u0002\u0002\u0002~{\u0003\u0002",
    "\u0002\u0002~|\u0003\u0002\u0002\u0002~}\u0003\u0002\u0002\u0002\u007f",
    "\r\u0003\u0002\u0002\u0002\u0080\u0081\u0007\u001f\u0002\u0002\u0081",
    "\u0082\u0007!\u0002\u0002\u0082\u0083\u0007 \u0002\u0002\u0083\u0085",
    "\u0007\"\u0002\u0002\u0084\u0086\u0005.\u0018\u0002\u0085\u0084\u0003",
    "\u0002\u0002\u0002\u0086\u0087\u0003\u0002\u0002\u0002\u0087\u0085\u0003",
    "\u0002\u0002\u0002\u0087\u0088\u0003\u0002\u0002\u0002\u0088\u0089\u0003",
    "\u0002\u0002\u0002\u0089\u008a\u0007 \u0002\u0002\u008a\u00ba\u0003",
    "\u0002\u0002\u0002\u008b\u008c\u0007\u001f\u0002\u0002\u008c\u008d\u0007",
    "!\u0002\u0002\u008d\u0091\u0007 \u0002\u0002\u008e\u0090\u0005.\u0018",
    "\u0002\u008f\u008e\u0003\u0002\u0002\u0002\u0090\u0093\u0003\u0002\u0002",
    "\u0002\u0091\u008f\u0003\u0002\u0002\u0002\u0091\u0092\u0003\u0002\u0002",
    "\u0002\u0092\u0094\u0003\u0002\u0002\u0002\u0093\u0091\u0003\u0002\u0002",
    "\u0002\u0094\u00ba\u0007 \u0002\u0002\u0095\u0096\u0007\u001f\u0002",
    "\u0002\u0096\u0098\u0007!\u0002\u0002\u0097\u0099\u0005.\u0018\u0002",
    "\u0098\u0097\u0003\u0002\u0002\u0002\u0099\u009a\u0003\u0002\u0002\u0002",
    "\u009a\u0098\u0003\u0002\u0002\u0002\u009a\u009b\u0003\u0002\u0002\u0002",
    "\u009b\u009c\u0003\u0002\u0002\u0002\u009c\u009d\u0007 \u0002\u0002",
    "\u009d\u00ba\u0003\u0002\u0002\u0002\u009e\u009f\u0007\u001f\u0002\u0002",
    "\u009f\u00a0\u0007 \u0002\u0002\u00a0\u00a2\u0007\"\u0002\u0002\u00a1",
    "\u00a3\u0005.\u0018\u0002\u00a2\u00a1\u0003\u0002\u0002\u0002\u00a3",
    "\u00a4\u0003\u0002\u0002\u0002\u00a4\u00a2\u0003\u0002\u0002\u0002\u00a4",
    "\u00a5\u0003\u0002\u0002\u0002\u00a5\u00a6\u0003\u0002\u0002\u0002\u00a6",
    "\u00a7\u0007 \u0002\u0002\u00a7\u00ba\u0003\u0002\u0002\u0002\u00a8",
    "\u00a9\u0007\u001f\u0002\u0002\u00a9\u00ad\u0007 \u0002\u0002\u00aa",
    "\u00ac\u0005.\u0018\u0002\u00ab\u00aa\u0003\u0002\u0002\u0002\u00ac",
    "\u00af\u0003\u0002\u0002\u0002\u00ad\u00ab\u0003\u0002\u0002\u0002\u00ad",
    "\u00ae\u0003\u0002\u0002\u0002\u00ae\u00b0\u0003\u0002\u0002\u0002\u00af",
    "\u00ad\u0003\u0002\u0002\u0002\u00b0\u00ba\u0007 \u0002\u0002\u00b1",
    "\u00b3\u0007\u001f\u0002\u0002\u00b2\u00b4\u0005.\u0018\u0002\u00b3",
    "\u00b2\u0003\u0002\u0002\u0002\u00b4\u00b5\u0003\u0002\u0002\u0002\u00b5",
    "\u00b3\u0003\u0002\u0002\u0002\u00b5\u00b6\u0003\u0002\u0002\u0002\u00b6",
    "\u00b7\u0003\u0002\u0002\u0002\u00b7\u00b8\u0007 \u0002\u0002\u00b8",
    "\u00ba\u0003\u0002\u0002\u0002\u00b9\u0080\u0003\u0002\u0002\u0002\u00b9",
    "\u008b\u0003\u0002\u0002\u0002\u00b9\u0095\u0003\u0002\u0002\u0002\u00b9",
    "\u009e\u0003\u0002\u0002\u0002\u00b9\u00a8\u0003\u0002\u0002\u0002\u00b9",
    "\u00b1\u0003\u0002\u0002\u0002\u00ba\u000f\u0003\u0002\u0002\u0002\u00bb",
    "\u00e5\u0005\u0012\n\u0002\u00bc\u00bd\u00073\u0002\u0002\u00bd\u00e5",
    "\u00058\u001d\u0002\u00be\u00bf\u00073\u0002\u0002\u00bf\u00c0\u0007",
    "(\u0002\u0002\u00c0\u00c1\u00058\u001d\u0002\u00c1\u00c2\u0007)\u0002",
    "\u0002\u00c2\u00e5\u0003\u0002\u0002\u0002\u00c3\u00c4\u00073\u0002",
    "\u0002\u00c4\u00c5\u0007(\u0002\u0002\u00c5\u00c6\u0007\"\u0002\u0002",
    "\u00c6\u00c7\u00058\u001d\u0002\u00c7\u00c8\u0007)\u0002\u0002\u00c8",
    "\u00e5\u0003\u0002\u0002\u0002\u00c9\u00ca\u00074\u0002\u0002\u00ca",
    "\u00cb\u00078\u0002\u0002\u00cb\u00cc\u0005B\"\u0002\u00cc\u00cd\u0007",
    "9\u0002\u0002\u00cd\u00e5\u0003\u0002\u0002\u0002\u00ce\u00cf\u0007",
    "4\u0002\u0002\u00cf\u00d0\u0007:\u0002\u0002\u00d0\u00d1\u0005B\"\u0002",
    "\u00d1\u00d2\u0007:\u0002\u0002\u00d2\u00e5\u0003\u0002\u0002\u0002",
    "\u00d3\u00d4\u00073\u0002\u0002\u00d4\u00d5\u0007(\u0002\u0002\u00d5",
    "\u00d6\u0005B\"\u0002\u00d6\u00d7\u0007)\u0002\u0002\u00d7\u00e5\u0003",
    "\u0002\u0002\u0002\u00d8\u00d9\u00074\u0002\u0002\u00d9\u00da\u0007",
    "(\u0002\u0002\u00da\u00db\u0005B\"\u0002\u00db\u00dc\u0007)\u0002\u0002",
    "\u00dc\u00e5\u0003\u0002\u0002\u0002\u00dd\u00de\u00076\u0002\u0002",
    "\u00de\u00df\u0007%\u0002\u0002\u00df\u00e0\u0007j\u0002\u0002\u00e0",
    "\u00e1\u0007>\u0002\u0002\u00e1\u00e2\u0005B\"\u0002\u00e2\u00e3\u0007",
    "7\u0002\u0002\u00e3\u00e5\u0003\u0002\u0002\u0002\u00e4\u00bb\u0003",
    "\u0002\u0002\u0002\u00e4\u00bc\u0003\u0002\u0002\u0002\u00e4\u00be\u0003",
    "\u0002\u0002\u0002\u00e4\u00c3\u0003\u0002\u0002\u0002\u00e4\u00c9\u0003",
    "\u0002\u0002\u0002\u00e4\u00ce\u0003\u0002\u0002\u0002\u00e4\u00d3\u0003",
    "\u0002\u0002\u0002\u00e4\u00d8\u0003\u0002\u0002\u0002\u00e4\u00dd\u0003",
    "\u0002\u0002\u0002\u00e5\u0011\u0003\u0002\u0002\u0002\u00e6\u00ea\u0005",
    ":\u001e\u0002\u00e7\u00e8\u0007\f\u0002\u0002\u00e8\u00ea\u0005@!\u0002",
    "\u00e9\u00e6\u0003\u0002\u0002\u0002\u00e9\u00e7\u0003\u0002\u0002\u0002",
    "\u00ea\u0013\u0003\u0002\u0002\u0002\u00eb\u00ec\u00076\u0002\u0002",
    "\u00ec\u00ed\u0007%\u0002\u0002\u00ed\u00ee\u00078\u0002\u0002\u00ee",
    "\u00ef\u0005B\"\u0002\u00ef\u00f0\u00079\u0002\u0002\u00f0\u00f1\u0005",
    "\u0004\u0003\u0002\u00f1\u00f2\u00077\u0002\u0002\u00f2\u0109\u0003",
    "\u0002\u0002\u0002\u00f3\u00f4\u00076\u0002\u0002\u00f4\u00f5\u0007",
    "%\u0002\u0002\u00f5\u00f6\u0007:\u0002\u0002\u00f6\u00f7\u0005B\"\u0002",
    "\u00f7\u00f8\u0007:\u0002\u0002\u00f8\u00f9\u0005\u0004\u0003\u0002",
    "\u00f9\u00fa\u00077\u0002\u0002\u00fa\u0109\u0003\u0002\u0002\u0002",
    "\u00fb\u00fc\u00076\u0002\u0002\u00fc\u00fd\u0007%\u0002\u0002\u00fd",
    "\u00fe\u0007j\u0002\u0002\u00fe\u00ff\u00078\u0002\u0002\u00ff\u0100",
    "\u0005B\"\u0002\u0100\u0101\u00079\u0002\u0002\u0101\u0102\u0005\u0004",
    "\u0003\u0002\u0102\u0103\u00077\u0002\u0002\u0103\u0109\u0003\u0002",
    "\u0002\u0002\u0104\u0105\u00076\u0002\u0002\u0105\u0106\u0005\u0004",
    "\u0003\u0002\u0106\u0107\u00077\u0002\u0002\u0107\u0109\u0003\u0002",
    "\u0002\u0002\u0108\u00eb\u0003\u0002\u0002\u0002\u0108\u00f3\u0003\u0002",
    "\u0002\u0002\u0108\u00fb\u0003\u0002\u0002\u0002\u0108\u0104\u0003\u0002",
    "\u0002\u0002\u0109\u0015\u0003\u0002\u0002\u0002\u010a\u010b\u00076",
    "\u0002\u0002\u010b\u010c\u0007%\u0002\u0002\u010c\u010d\u0007<\u0002",
    "\u0002\u010d\u010e\u0005\u0004\u0003\u0002\u010e\u010f\u00077\u0002",
    "\u0002\u010f\u011d\u0003\u0002\u0002\u0002\u0110\u0111\u00076\u0002",
    "\u0002\u0111\u0112\u0007%\u0002\u0002\u0112\u0113\u00075\u0002\u0002",
    "\u0113\u0114\u0005\u0004\u0003\u0002\u0114\u0115\u00077\u0002\u0002",
    "\u0115\u011d\u0003\u0002\u0002\u0002\u0116\u0117\u00076\u0002\u0002",
    "\u0117\u0118\u0007%\u0002\u0002\u0118\u0119\u00079\u0002\u0002\u0119",
    "\u011a\u0005\u0004\u0003\u0002\u011a\u011b\u00077\u0002\u0002\u011b",
    "\u011d\u0003\u0002\u0002\u0002\u011c\u010a\u0003\u0002\u0002\u0002\u011c",
    "\u0110\u0003\u0002\u0002\u0002\u011c\u0116\u0003\u0002\u0002\u0002\u011d",
    "\u0017\u0003\u0002\u0002\u0002\u011e\u011f\u00076\u0002\u0002\u011f",
    "\u0120\u0007%\u0002\u0002\u0120\u0121\u0007=\u0002\u0002\u0121\u0122",
    "\u0005F$\u0002\u0122\u0123\u00077\u0002\u0002\u0123\u0019\u0003\u0002",
    "\u0002\u0002\u0124\u0125\u00076\u0002\u0002\u0125\u0126\u0007%\u0002",
    "\u0002\u0126\u0127\u0005\u001c\u000f\u0002\u0127\u0128\u0007\"\u0002",
    "\u0002\u0128\u0129\u0005\u001c\u000f\u0002\u0129\u012a\u00077\u0002",
    "\u0002\u012a\u015b\u0003\u0002\u0002\u0002\u012b\u012c\u00076\u0002",
    "\u0002\u012c\u012d\u0007%\u0002\u0002\u012d\u012e\u0005\u001c\u000f",
    "\u0002\u012e\u012f\u00077\u0002\u0002\u012f\u015b\u0003\u0002\u0002",
    "\u0002\u0130\u0131\u00076\u0002\u0002\u0131\u0132\u0007%\u0002\u0002",
    "\u0132\u0133\u0007\"\u0002\u0002\u0133\u0134\u0005\u001c\u000f\u0002",
    "\u0134\u0135\u00077\u0002\u0002\u0135\u015b\u0003\u0002\u0002\u0002",
    "\u0136\u0137\u00076\u0002\u0002\u0137\u0138\u0007\'\u0002\u0002\u0138",
    "\u0139\u0007h\u0002\u0002\u0139\u013a\u0007i\u0002\u0002\u013a\u013b",
    "\u0007;\u0002\u0002\u013b\u013c\u0007m\u0002\u0002\u013c\u013d\u0007",
    "n\u0002\u0002\u013d\u013e\u0007[\u0002\u0002\u013e\u013f\u0007l\u0002",
    "\u0002\u013f\u0140\u0007n\u0002\u0002\u0140\u0141\u0007;\u0002\u0002",
    "\u0141\u0142\u0007i\u0002\u0002\u0142\u0143\u0007j\u0002\u0002\u0143",
    "\u0144\u0007n\u0002\u0002\u0144\u015b\u00077\u0002\u0002\u0145\u0146",
    "\u00076\u0002\u0002\u0146\u0147\u0007\'\u0002\u0002\u0147\u0148\u0007",
    "o\u0002\u0002\u0148\u0149\u0007n\u0002\u0002\u0149\u014a\u0007`\u0002",
    "\u0002\u014a\u014b\u0007|\u0002\u0002\u014b\u015b\u00077\u0002\u0002",
    "\u014c\u014d\u00076\u0002\u0002\u014d\u014e\u0007\'\u0002\u0002\u014e",
    "\u014f\u0007o\u0002\u0002\u014f\u0150\u0007n\u0002\u0002\u0150\u0151",
    "\u0007`\u0002\u0002\u0151\u0152\u0007u\u0002\u0002\u0152\u0153\u0007",
    "z\u0002\u0002\u0153\u015b\u00077\u0002\u0002\u0154\u0155\u00076\u0002",
    "\u0002\u0155\u0156\u0007\'\u0002\u0002\u0156\u0157\u0007o\u0002\u0002",
    "\u0157\u0158\u0007]\u0002\u0002\u0158\u0159\u0007j\u0002\u0002\u0159",
    "\u015b\u00077\u0002\u0002\u015a\u0124\u0003\u0002\u0002\u0002\u015a",
    "\u012b\u0003\u0002\u0002\u0002\u015a\u0130\u0003\u0002\u0002\u0002\u015a",
    "\u0136\u0003\u0002\u0002\u0002\u015a\u0145\u0003\u0002\u0002\u0002\u015a",
    "\u014c\u0003\u0002\u0002\u0002\u015a\u0154\u0003\u0002\u0002\u0002\u015b",
    "\u001b\u0003\u0002\u0002\u0002\u015c\u015e\u0005\u001e\u0010\u0002\u015d",
    "\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002\u015f",
    "\u015d\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160",
    "\u001d\u0003\u0002\u0002\u0002\u0161\u0162\t\u0002\u0002\u0002\u0162",
    "\u001f\u0003\u0002\u0002\u0002\u0163\u0164\u00076\u0002\u0002\u0164",
    "\u0165\u0007%\u0002\u0002\u0165\u0166\u0007>\u0002\u0002\u0166\u0167",
    "\u0005\u0004\u0003\u0002\u0167\u0168\u00077\u0002\u0002\u0168\u017e",
    "\u0003\u0002\u0002\u0002\u0169\u016a\u00076\u0002\u0002\u016a\u016b",
    "\u0007%\u0002\u0002\u016b\u016c\u0007?\u0002\u0002\u016c\u016d\u0005",
    "\u0004\u0003\u0002\u016d\u016e\u00077\u0002\u0002\u016e\u017e\u0003",
    "\u0002\u0002\u0002\u016f\u0170\u00076\u0002\u0002\u0170\u0171\u0007",
    "%\u0002\u0002\u0171\u0172\u00078\u0002\u0002\u0172\u0173\u0007>\u0002",
    "\u0002\u0173\u0174\u0005\u0004\u0003\u0002\u0174\u0175\u00077\u0002",
    "\u0002\u0175\u017e\u0003\u0002\u0002\u0002\u0176\u0177\u00076\u0002",
    "\u0002\u0177\u0178\u0007%\u0002\u0002\u0178\u0179\u00078\u0002\u0002",
    "\u0179\u017a\u0007?\u0002\u0002\u017a\u017b\u0005\u0004\u0003\u0002",
    "\u017b\u017c\u00077\u0002\u0002\u017c\u017e\u0003\u0002\u0002\u0002",
    "\u017d\u0163\u0003\u0002\u0002\u0002\u017d\u0169\u0003\u0002\u0002\u0002",
    "\u017d\u016f\u0003\u0002\u0002\u0002\u017d\u0176\u0003\u0002\u0002\u0002",
    "\u017e!\u0003\u0002\u0002\u0002\u017f\u0180\u00076\u0002\u0002\u0180",
    "\u0181\u0007%\u0002\u0002\u0181\u0182\u0007l\u0002\u0002\u0182\u01ce",
    "\u00077\u0002\u0002\u0183\u0184\u00076\u0002\u0002\u0184\u0185\u0007",
    "%\u0002\u0002\u0185\u0186\u00058\u001d\u0002\u0186\u0187\u00077\u0002",
    "\u0002\u0187\u01ce\u0003\u0002\u0002\u0002\u0188\u0189\u00076\u0002",
    "\u0002\u0189\u018a\u0007%\u0002\u0002\u018a\u018b\u0007&\u0002\u0002",
    "\u018b\u018c\u00058\u001d\u0002\u018c\u018d\u00077\u0002\u0002\u018d",
    "\u01ce\u0003\u0002\u0002\u0002\u018e\u018f\u00076\u0002\u0002\u018f",
    "\u0190\u0007%\u0002\u0002\u0190\u0191\u0007\"\u0002\u0002\u0191\u0192",
    "\u00058\u001d\u0002\u0192\u0193\u00077\u0002\u0002\u0193\u01ce\u0003",
    "\u0002\u0002\u0002\u0194\u0195\u00076\u0002\u0002\u0195\u0196\u0007",
    "%\u0002\u0002\u0196\u0197\u0007@\u0002\u0002\u0197\u0198\u0005B\"\u0002",
    "\u0198\u0199\u00077\u0002\u0002\u0199\u01ce\u0003\u0002\u0002\u0002",
    "\u019a\u019b\u00076\u0002\u0002\u019b\u019c\u0007%\u0002\u0002\u019c",
    "\u019d\u0007j\u0002\u0002\u019d\u019e\u00079\u0002\u0002\u019e\u019f",
    "\u0005B\"\u0002\u019f\u01a0\u00077\u0002\u0002\u01a0\u01ce\u0003\u0002",
    "\u0002\u0002\u01a1\u01a2\u00073\u0002\u0002\u01a2\u01a3\u00078\u0002",
    "\u0002\u01a3\u01a4\u0005B\"\u0002\u01a4\u01a5\u00079\u0002\u0002\u01a5",
    "\u01ce\u0003\u0002\u0002\u0002\u01a6\u01a7\u00073\u0002\u0002\u01a7",
    "\u01a8\u0007:\u0002\u0002\u01a8\u01a9\u0005B\"\u0002\u01a9\u01aa\u0007",
    ":\u0002\u0002\u01aa\u01ce\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007",
    "3\u0002\u0002\u01ac\u01ad\u00078\u0002\u0002\u01ad\u01ae\u00058\u001d",
    "\u0002\u01ae\u01af\u00079\u0002\u0002\u01af\u01ce\u0003\u0002\u0002",
    "\u0002\u01b0\u01b1\u00073\u0002\u0002\u01b1\u01b2\u0007:\u0002\u0002",
    "\u01b2\u01b3\u00058\u001d\u0002\u01b3\u01b4\u0007:\u0002\u0002\u01b4",
    "\u01ce\u0003\u0002\u0002\u0002\u01b5\u01b6\u00073\u0002\u0002\u01b6",
    "\u01b7\u00078\u0002\u0002\u01b7\u01b8\u0007&\u0002\u0002\u01b8\u01b9",
    "\u00058\u001d\u0002\u01b9\u01ba\u00079\u0002\u0002\u01ba\u01ce\u0003",
    "\u0002\u0002\u0002\u01bb\u01bc\u00073\u0002\u0002\u01bc\u01bd\u0007",
    ":\u0002\u0002\u01bd\u01be\u0007&\u0002\u0002\u01be\u01bf\u00058\u001d",
    "\u0002\u01bf\u01c0\u0007:\u0002\u0002\u01c0\u01ce\u0003\u0002\u0002",
    "\u0002\u01c1\u01c2\u00073\u0002\u0002\u01c2\u01c3\u00078\u0002\u0002",
    "\u01c3\u01c4\u0007\"\u0002\u0002\u01c4\u01c5\u00058\u001d\u0002\u01c5",
    "\u01c6\u00079\u0002\u0002\u01c6\u01ce\u0003\u0002\u0002\u0002\u01c7",
    "\u01c8\u00073\u0002\u0002\u01c8\u01c9\u0007:\u0002\u0002\u01c9\u01ca",
    "\u0007\"\u0002\u0002\u01ca\u01cb\u00058\u001d\u0002\u01cb\u01cc\u0007",
    ":\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u017f\u0003",
    "\u0002\u0002\u0002\u01cd\u0183\u0003\u0002\u0002\u0002\u01cd\u0188\u0003",
    "\u0002\u0002\u0002\u01cd\u018e\u0003\u0002\u0002\u0002\u01cd\u0194\u0003",
    "\u0002\u0002\u0002\u01cd\u019a\u0003\u0002\u0002\u0002\u01cd\u01a1\u0003",
    "\u0002\u0002\u0002\u01cd\u01a6\u0003\u0002\u0002\u0002\u01cd\u01ab\u0003",
    "\u0002\u0002\u0002\u01cd\u01b0\u0003\u0002\u0002\u0002\u01cd\u01b5\u0003",
    "\u0002\u0002\u0002\u01cd\u01bb\u0003\u0002\u0002\u0002\u01cd\u01c1\u0003",
    "\u0002\u0002\u0002\u01cd\u01c7\u0003\u0002\u0002\u0002\u01ce#\u0003",
    "\u0002\u0002\u0002\u01cf\u01d0\u00076\u0002\u0002\u01d0\u01d1\u0007",
    "%\u0002\u0002\u01d1\u01d2\u00076\u0002\u0002\u01d2\u01d3\u00058\u001d",
    "\u0002\u01d3\u01d4\u00077\u0002\u0002\u01d4\u01d7\u0005\u0004\u0003",
    "\u0002\u01d5\u01d6\u00075\u0002\u0002\u01d6\u01d8\u0005\u0004\u0003",
    "\u0002\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d7\u01d8\u0003\u0002\u0002",
    "\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9\u01da\u00077\u0002",
    "\u0002\u01da\u0267\u0003\u0002\u0002\u0002\u01db\u01dc\u00076\u0002",
    "\u0002\u01dc\u01dd\u0007%\u0002\u0002\u01dd\u01de\u00076\u0002\u0002",
    "\u01de\u01df\u0007&\u0002\u0002\u01df\u01e0\u00058\u001d\u0002\u01e0",
    "\u01e1\u00077\u0002\u0002\u01e1\u01e4\u0005\u0004\u0003\u0002\u01e2",
    "\u01e3\u00075\u0002\u0002\u01e3\u01e5\u0005\u0004\u0003\u0002\u01e4",
    "\u01e2\u0003\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5",
    "\u01e6\u0003\u0002\u0002\u0002\u01e6\u01e7\u00077\u0002\u0002\u01e7",
    "\u0267\u0003\u0002\u0002\u0002\u01e8\u01e9\u00076\u0002\u0002\u01e9",
    "\u01ea\u0007%\u0002\u0002\u01ea\u01eb\u00076\u0002\u0002\u01eb\u01ec",
    "\u0007\"\u0002\u0002\u01ec\u01ed\u00058\u001d\u0002\u01ed\u01ee\u0007",
    "7\u0002\u0002\u01ee\u01f1\u0005\u0004\u0003\u0002\u01ef\u01f0\u0007",
    "5\u0002\u0002\u01f0\u01f2\u0005\u0004\u0003\u0002\u01f1\u01ef\u0003",
    "\u0002\u0002\u0002\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f3\u0003",
    "\u0002\u0002\u0002\u01f3\u01f4\u00077\u0002\u0002\u01f4\u0267\u0003",
    "\u0002\u0002\u0002\u01f5\u01f6\u00076\u0002\u0002\u01f6\u01f7\u0007",
    "%\u0002\u0002\u01f7\u01f8\u00076\u0002\u0002\u01f8\u01f9\u00078\u0002",
    "\u0002\u01f9\u01fa\u0005B\"\u0002\u01fa\u01fb\u00079\u0002\u0002\u01fb",
    "\u01fc\u00077\u0002\u0002\u01fc\u01ff\u0005\u0004\u0003\u0002\u01fd",
    "\u01fe\u00075\u0002\u0002\u01fe\u0200\u0005\u0004\u0003\u0002\u01ff",
    "\u01fd\u0003\u0002\u0002\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200",
    "\u0201\u0003\u0002\u0002\u0002\u0201\u0202\u00077\u0002\u0002\u0202",
    "\u0267\u0003\u0002\u0002\u0002\u0203\u0204\u00076\u0002\u0002\u0204",
    "\u0205\u0007%\u0002\u0002\u0205\u0206\u00076\u0002\u0002\u0206\u0207",
    "\u0007:\u0002\u0002\u0207\u0208\u0005B\"\u0002\u0208\u0209\u0007:\u0002",
    "\u0002\u0209\u020a\u00077\u0002\u0002\u020a\u020d\u0005\u0004\u0003",
    "\u0002\u020b\u020c\u00075\u0002\u0002\u020c\u020e\u0005\u0004\u0003",
    "\u0002\u020d\u020b\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002",
    "\u0002\u020e\u020f\u0003\u0002\u0002\u0002\u020f\u0210\u00077\u0002",
    "\u0002\u0210\u0267\u0003\u0002\u0002\u0002\u0211\u0212\u00076\u0002",
    "\u0002\u0212\u0213\u0007%\u0002\u0002\u0213\u0214\u00076\u0002\u0002",
    "\u0214\u0215\u0007l\u0002\u0002\u0215\u0216\u00058\u001d\u0002\u0216",
    "\u0217\u00077\u0002\u0002\u0217\u021a\u0005\u0004\u0003\u0002\u0218",
    "\u0219\u00075\u0002\u0002\u0219\u021b\u0005\u0004\u0003\u0002\u021a",
    "\u0218\u0003\u0002\u0002\u0002\u021a\u021b\u0003\u0002\u0002\u0002\u021b",
    "\u021c\u0003\u0002\u0002\u0002\u021c\u021d\u00077\u0002\u0002\u021d",
    "\u0267\u0003\u0002\u0002\u0002\u021e\u021f\u00076\u0002\u0002\u021f",
    "\u0220\u0007%\u0002\u0002\u0220\u0221\u00076\u0002\u0002\u0221\u0222",
    "\u0007l\u0002\u0002\u0222\u0223\u00077\u0002\u0002\u0223\u0226\u0005",
    "\u0004\u0003\u0002\u0224\u0225\u00075\u0002\u0002\u0225\u0227\u0005",
    "\u0004\u0003\u0002\u0226\u0224\u0003\u0002\u0002\u0002\u0226\u0227\u0003",
    "\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u0229\u0007",
    "7\u0002\u0002\u0229\u0267\u0003\u0002\u0002\u0002\u022a\u022b\u0007",
    "6\u0002\u0002\u022b\u022c\u0007%\u0002\u0002\u022c\u022d\u00076\u0002",
    "\u0002\u022d\u022e\u0007l\u0002\u0002\u022e\u022f\u0007@\u0002\u0002",
    "\u022f\u0230\u0005B\"\u0002\u0230\u0231\u00077\u0002\u0002\u0231\u0234",
    "\u0005\u0004\u0003\u0002\u0232\u0233\u00075\u0002\u0002\u0233\u0235",
    "\u0005\u0004\u0003\u0002\u0234\u0232\u0003\u0002\u0002\u0002\u0234\u0235",
    "\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002\u0002\u0236\u0237",
    "\u00077\u0002\u0002\u0237\u0267\u0003\u0002\u0002\u0002\u0238\u0239",
    "\u00076\u0002\u0002\u0239\u023a\u0007%\u0002\u0002\u023a\u023b\u0007",
    "6\u0002\u0002\u023b\u023c\u0007^\u0002\u0002\u023c\u023d\u0007_\u0002",
    "\u0002\u023d\u023e\u0007`\u0002\u0002\u023e\u023f\u0007c\u0002\u0002",
    "\u023f\u0240\u0007h\u0002\u0002\u0240\u0241\u0007_\u0002\u0002\u0241",
    "\u0242\u00077\u0002\u0002\u0242\u0245\u0005\u0004\u0003\u0002\u0243",
    "\u0244\u00075\u0002\u0002\u0244\u0246\u0005\u0004\u0003\u0002\u0245",
    "\u0243\u0003\u0002\u0002\u0002\u0245\u0246\u0003\u0002\u0002\u0002\u0246",
    "\u0247\u0003\u0002\u0002\u0002\u0247\u0248\u00077\u0002\u0002\u0248",
    "\u0267\u0003\u0002\u0002\u0002\u0249\u024a\u00076\u0002\u0002\u024a",
    "\u024b\u0007%\u0002\u0002\u024b\u024c\u00076\u0002\u0002\u024c\u024d",
    "\u0007A\u0002\u0002\u024d\u024e\u0007S\u0002\u0002\u024e\u024f\u0007",
    "S\u0002\u0002\u024f\u0250\u0007E\u0002\u0002\u0250\u0251\u0007R\u0002",
    "\u0002\u0251\u0252\u0007T\u0002\u0002\u0252\u0253\u00077\u0002\u0002",
    "\u0253\u0256\u0005\u0004\u0003\u0002\u0254\u0255\u00075\u0002\u0002",
    "\u0255\u0257\u0005\u0004\u0003\u0002\u0256\u0254\u0003\u0002\u0002\u0002",
    "\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0258\u0003\u0002\u0002\u0002",
    "\u0258\u0259\u00077\u0002\u0002\u0259\u0267\u0003\u0002\u0002\u0002",
    "\u025a\u025b\u00076\u0002\u0002\u025b\u025c\u0007%\u0002\u0002\u025c",
    "\u025d\u00076\u0002\u0002\u025d\u025e\u0005B\"\u0002\u025e\u025f\u0007",
    "7\u0002\u0002\u025f\u0262\u0005\u0004\u0003\u0002\u0260\u0261\u0007",
    "5\u0002\u0002\u0261\u0263\u0005\u0004\u0003\u0002\u0262\u0260\u0003",
    "\u0002\u0002\u0002\u0262\u0263\u0003\u0002\u0002\u0002\u0263\u0264\u0003",
    "\u0002\u0002\u0002\u0264\u0265\u00077\u0002\u0002\u0265\u0267\u0003",
    "\u0002\u0002\u0002\u0266\u01cf\u0003\u0002\u0002\u0002\u0266\u01db\u0003",
    "\u0002\u0002\u0002\u0266\u01e8\u0003\u0002\u0002\u0002\u0266\u01f5\u0003",
    "\u0002\u0002\u0002\u0266\u0203\u0003\u0002\u0002\u0002\u0266\u0211\u0003",
    "\u0002\u0002\u0002\u0266\u021e\u0003\u0002\u0002\u0002\u0266\u022a\u0003",
    "\u0002\u0002\u0002\u0266\u0238\u0003\u0002\u0002\u0002\u0266\u0249\u0003",
    "\u0002\u0002\u0002\u0266\u025a\u0003\u0002\u0002\u0002\u0267%\u0003",
    "\u0002\u0002\u0002\u0268\u0269\u00076\u0002\u0002\u0269\u026a\u0007",
    "\'\u0002\u0002\u026a\u026b\u0007[\u0002\u0002\u026b\u026c\u0007]\u0002",
    "\u0002\u026c\u026d\u0007]\u0002\u0002\u026d\u026e\u0007_\u0002\u0002",
    "\u026e\u026f\u0007j\u0002\u0002\u026f\u0270\u0007n\u0002\u0002\u0270",
    "\u02cd\u00077\u0002\u0002\u0271\u0272\u00076\u0002\u0002\u0272\u0273",
    "\u0007\'\u0002\u0002\u0273\u0277\u0007`\u0002\u0002\u0274\u0275\u0007",
    "[\u0002\u0002\u0275\u0276\u0007c\u0002\u0002\u0276\u0278\u0007f\u0002",
    "\u0002\u0277\u0274\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002",
    "\u0002\u0278\u0279\u0003\u0002\u0002\u0002\u0279\u02cd\u00077\u0002",
    "\u0002\u027a\u027b\u00076\u0002\u0002\u027b\u0280\u0007\'\u0002\u0002",
    "\u027c\u027d\u0007g\u0002\u0002\u027d\u027e\u0007[\u0002\u0002\u027e",
    "\u027f\u0007l\u0002\u0002\u027f\u0281\u0007e\u0002\u0002\u0280\u027c",
    "\u0003\u0002\u0002\u0002\u0280\u0281\u0003\u0002\u0002\u0002\u0281\u0282",
    "\u0003\u0002\u0002\u0002\u0282\u0283\u0007<\u0002\u0002\u0283\u0284",
    "\u0007h\u0002\u0002\u0284\u0285\u0007[\u0002\u0002\u0285\u0286\u0007",
    "g\u0002\u0002\u0286\u0287\u0007_\u0002\u0002\u0287\u02cd\u00077\u0002",
    "\u0002\u0288\u0289\u00076\u0002\u0002\u0289\u028a\u0007\'\u0002\u0002",
    "\u028a\u028b\u0007]\u0002\u0002\u028b\u028c\u0007i\u0002\u0002\u028c",
    "\u028d\u0007g\u0002\u0002\u028d\u028e\u0007g\u0002\u0002\u028e\u028f",
    "\u0007c\u0002\u0002\u028f\u0290\u0007n\u0002\u0002\u0290\u02cd\u0007",
    "7\u0002\u0002\u0291\u0292\u00076\u0002\u0002\u0292\u0293\u0007\'\u0002",
    "\u0002\u0293\u0294\u0007j\u0002\u0002\u0294\u0295\u0007l\u0002\u0002",
    "\u0295\u0296\u0007o\u0002\u0002\u0296\u0297\u0007h\u0002\u0002\u0297",
    "\u0298\u0007_\u0002\u0002\u0298\u02cd\u00077\u0002\u0002\u0299\u029a",
    "\u00076\u0002\u0002\u029a\u029b\u0007\'\u0002\u0002\u029b\u029c\u0007",
    "j\u0002\u0002\u029c\u029d\u0007l\u0002\u0002\u029d\u029e\u0007o\u0002",
    "\u0002\u029e\u029f\u0007h\u0002\u0002\u029f\u02a0\u0007_\u0002\u0002",
    "\u02a0\u02a1\u0007<\u0002\u0002\u02a1\u02a2\u0007h\u0002\u0002\u02a2",
    "\u02a3\u0007[\u0002\u0002\u02a3\u02a4\u0007g\u0002\u0002\u02a4\u02a5",
    "\u0007_\u0002\u0002\u02a5\u02cd\u00077\u0002\u0002\u02a6\u02a7\u0007",
    "6\u0002\u0002\u02a7\u02a8\u0007\'\u0002\u0002\u02a8\u02a9\u0007m\u0002",
    "\u0002\u02a9\u02aa\u0007e\u0002\u0002\u02aa\u02ab\u0007c\u0002\u0002",
    "\u02ab\u02ac\u0007j\u0002\u0002\u02ac\u02cd\u00077\u0002\u0002\u02ad",
    "\u02ae\u00076\u0002\u0002\u02ae\u02af\u0007\'\u0002\u0002\u02af\u02b0",
    "\u0007m\u0002\u0002\u02b0\u02b1\u0007e\u0002\u0002\u02b1\u02b2\u0007",
    "c\u0002\u0002\u02b2\u02b3\u0007j\u0002\u0002\u02b3\u02b4\u0007<\u0002",
    "\u0002\u02b4\u02b5\u0007h\u0002\u0002\u02b5\u02b6\u0007[\u0002\u0002",
    "\u02b6\u02b7\u0007g\u0002\u0002\u02b7\u02b8\u0007_\u0002\u0002\u02b8",
    "\u02cd\u00077\u0002\u0002\u02b9\u02ba\u00076\u0002\u0002\u02ba\u02bb",
    "\u0007\'\u0002\u0002\u02bb\u02bc\u0007n\u0002\u0002\u02bc\u02bd\u0007",
    "b\u0002\u0002\u02bd\u02be\u0007_\u0002\u0002\u02be\u02bf\u0007h\u0002",
    "\u0002\u02bf\u02cd\u00077\u0002\u0002\u02c0\u02c1\u00076\u0002\u0002",
    "\u02c1\u02c2\u0007\'\u0002\u0002\u02c2\u02c3\u0007n\u0002\u0002\u02c3",
    "\u02c4\u0007b\u0002\u0002\u02c4\u02c5\u0007_\u0002\u0002\u02c5\u02c6",
    "\u0007h\u0002\u0002\u02c6\u02c7\u0007<\u0002\u0002\u02c7\u02c8\u0007",
    "h\u0002\u0002\u02c8\u02c9\u0007[\u0002\u0002\u02c9\u02ca\u0007g\u0002",
    "\u0002\u02ca\u02cb\u0007_\u0002\u0002\u02cb\u02cd\u00077\u0002\u0002",
    "\u02cc\u0268\u0003\u0002\u0002\u0002\u02cc\u0271\u0003\u0002\u0002\u0002",
    "\u02cc\u027a\u0003\u0002\u0002\u0002\u02cc\u0288\u0003\u0002\u0002\u0002",
    "\u02cc\u0291\u0003\u0002\u0002\u0002\u02cc\u0299\u0003\u0002\u0002\u0002",
    "\u02cc\u02a6\u0003\u0002\u0002\u0002\u02cc\u02ad\u0003\u0002\u0002\u0002",
    "\u02cc\u02b9\u0003\u0002\u0002\u0002\u02cc\u02c0\u0003\u0002\u0002\u0002",
    "\u02cd\'\u0003\u0002\u0002\u0002\u02ce\u02cf\u00076\u0002\u0002\u02cf",
    "\u02d0\u0007\'\u0002\u0002\u02d0\u02d1\u0007]\u0002\u0002\u02d1\u02d2",
    "\u0007l\u0002\u0002\u02d2\u030c\u00077\u0002\u0002\u02d3\u02d4\u0007",
    "6\u0002\u0002\u02d4\u02d5\u0007\'\u0002\u0002\u02d5\u02d6\u0007f\u0002",
    "\u0002\u02d6\u02d7\u0007`\u0002\u0002\u02d7\u030c\u00077\u0002\u0002",
    "\u02d8\u02d9\u00076\u0002\u0002\u02d9\u02da\u0007\'\u0002\u0002\u02da",
    "\u02db\u0007]\u0002\u0002\u02db\u02dc\u0007l\u0002\u0002\u02dc\u02dd",
    "\u0007f\u0002\u0002\u02dd\u02de\u0007`\u0002\u0002\u02de\u030c\u0007",
    "7\u0002\u0002\u02df\u02e0\u00076\u0002\u0002\u02e0\u02e1\u0007\'\u0002",
    "\u0002\u02e1\u02e2\u0007[\u0002\u0002\u02e2\u02e3\u0007h\u0002\u0002",
    "\u02e3\u02e4\u0007s\u0002\u0002\u02e4\u02e5\u0007]\u0002\u0002\u02e5",
    "\u02e6\u0007l\u0002\u0002\u02e6\u02e7\u0007f\u0002\u0002\u02e7\u02e8",
    "\u0007`\u0002\u0002\u02e8\u030c\u00077\u0002\u0002\u02e9\u02ea\u0007",
    "6\u0002\u0002\u02ea\u02eb\u0007\'\u0002\u0002\u02eb\u02ec\u0007[\u0002",
    "\u0002\u02ec\u02ed\u0007h\u0002\u0002\u02ed\u02ee\u0007s\u0002\u0002",
    "\u02ee\u030c\u00077\u0002\u0002\u02ef\u02f0\u00076\u0002\u0002\u02f0",
    "\u02f1\u0007\'\u0002\u0002\u02f1\u02f2\u0007\\\u0002\u0002\u02f2\u02f3",
    "\u0007m\u0002\u0002\u02f3\u02f4\u0007l\u0002\u0002\u02f4\u02f5\u0007",
    ";\u0002\u0002\u02f5\u02f6\u0007[\u0002\u0002\u02f6\u02f7\u0007h\u0002",
    "\u0002\u02f7\u02f8\u0007s\u0002\u0002\u02f8\u02f9\u0007]\u0002\u0002",
    "\u02f9\u02fa\u0007l\u0002\u0002\u02fa\u02fb\u0007f\u0002\u0002\u02fb",
    "\u02fc\u0007`\u0002\u0002\u02fc\u030c\u00077\u0002\u0002\u02fd\u02fe",
    "\u00076\u0002\u0002\u02fe\u02ff\u0007\'\u0002\u0002\u02ff\u0300\u0007",
    "\\\u0002\u0002\u0300\u0301\u0007m\u0002\u0002\u0301\u0302\u0007l\u0002",
    "\u0002\u0302\u0303\u0007;\u0002\u0002\u0303\u0304\u0007o\u0002\u0002",
    "\u0304\u0305\u0007h\u0002\u0002\u0305\u0306\u0007c\u0002\u0002\u0306",
    "\u0307\u0007]\u0002\u0002\u0307\u0308\u0007i\u0002\u0002\u0308\u0309",
    "\u0007^\u0002\u0002\u0309\u030a\u0007_\u0002\u0002\u030a\u030c\u0007",
    "7\u0002\u0002\u030b\u02ce\u0003\u0002\u0002\u0002\u030b\u02d3\u0003",
    "\u0002\u0002\u0002\u030b\u02d8\u0003\u0002\u0002\u0002\u030b\u02df\u0003",
    "\u0002\u0002\u0002\u030b\u02e9\u0003\u0002\u0002\u0002\u030b\u02ef\u0003",
    "\u0002\u0002\u0002\u030b\u02fd\u0003\u0002\u0002\u0002\u030c)\u0003",
    "\u0002\u0002\u0002\u030d\u030e\u00076\u0002\u0002\u030e\u030f\u0007",
    "%\u0002\u0002\u030f\u0310\u0007]\u0002\u0002\u0310\u0318\u00077\u0002",
    "\u0002\u0311\u0312\u00076\u0002\u0002\u0312\u0313\u0007%\u0002\u0002",
    "\u0313\u0314\u0007]\u0002\u0002\u0314\u0315\u00058\u001d\u0002\u0315",
    "\u0316\u00077\u0002\u0002\u0316\u0318\u0003\u0002\u0002\u0002\u0317",
    "\u030d\u0003\u0002\u0002\u0002\u0317\u0311\u0003\u0002\u0002\u0002\u0318",
    "+\u0003\u0002\u0002\u0002\u0319\u0334\u0005\"\u0012\u0002\u031a\u0334",
    "\u00050\u0019\u0002\u031b\u0334\u00052\u001a\u0002\u031c\u0334\u0005",
    "\u000e\b\u0002\u031d\u0334\u0005\u0014\u000b\u0002\u031e\u0334\u0005",
    "\u0016\f\u0002\u031f\u0334\u0005\u0018\r\u0002\u0320\u0334\u0005\u001a",
    "\u000e\u0002\u0321\u0334\u0005 \u0011\u0002\u0322\u0334\u0005\u0010",
    "\t\u0002\u0323\u0334\u0005$\u0013\u0002\u0324\u0334\u0005&\u0014\u0002",
    "\u0325\u0334\u0005(\u0015\u0002\u0326\u0334\u0005*\u0016\u0002\u0327",
    "\u0334\u0007\u000e\u0002\u0002\u0328\u0334\u0007!\u0002\u0002\u0329",
    "\u0334\u0007-\u0002\u0002\u032a\u0334\u0007+\u0002\u0002\u032b\u0334",
    "\u0007,\u0002\u0002\u032c\u0334\u0007.\u0002\u0002\u032d\u0334\u0007",
    "/\u0002\u0002\u032e\u0334\u00070\u0002\u0002\u032f\u0334\u00071\u0002",
    "\u0002\u0330\u0334\u00072\u0002\u0002\u0331\u0334\u0007\u000f\u0002",
    "\u0002\u0332\u0334\u0007\u001e\u0002\u0002\u0333\u0319\u0003\u0002\u0002",
    "\u0002\u0333\u031a\u0003\u0002\u0002\u0002\u0333\u031b\u0003\u0002\u0002",
    "\u0002\u0333\u031c\u0003\u0002\u0002\u0002\u0333\u031d\u0003\u0002\u0002",
    "\u0002\u0333\u031e\u0003\u0002\u0002\u0002\u0333\u031f\u0003\u0002\u0002",
    "\u0002\u0333\u0320\u0003\u0002\u0002\u0002\u0333\u0321\u0003\u0002\u0002",
    "\u0002\u0333\u0322\u0003\u0002\u0002\u0002\u0333\u0323\u0003\u0002\u0002",
    "\u0002\u0333\u0324\u0003\u0002\u0002\u0002\u0333\u0325\u0003\u0002\u0002",
    "\u0002\u0333\u0326\u0003\u0002\u0002\u0002\u0333\u0327\u0003\u0002\u0002",
    "\u0002\u0333\u0328\u0003\u0002\u0002\u0002\u0333\u0329\u0003\u0002\u0002",
    "\u0002\u0333\u032a\u0003\u0002\u0002\u0002\u0333\u032b\u0003\u0002\u0002",
    "\u0002\u0333\u032c\u0003\u0002\u0002\u0002\u0333\u032d\u0003\u0002\u0002",
    "\u0002\u0333\u032e\u0003\u0002\u0002\u0002\u0333\u032f\u0003\u0002\u0002",
    "\u0002\u0333\u0330\u0003\u0002\u0002\u0002\u0333\u0331\u0003\u0002\u0002",
    "\u0002\u0333\u0332\u0003\u0002\u0002\u0002\u0334-\u0003\u0002\u0002",
    "\u0002\u0335\u0336\u00054\u001b\u0002\u0336\u0337\u0007\"\u0002\u0002",
    "\u0337\u0338\u00054\u001b\u0002\u0338\u033d\u0003\u0002\u0002\u0002",
    "\u0339\u033d\u00050\u0019\u0002\u033a\u033d\u00054\u001b\u0002\u033b",
    "\u033d\u0005\u0012\n\u0002\u033c\u0335\u0003\u0002\u0002\u0002\u033c",
    "\u0339\u0003\u0002\u0002\u0002\u033c\u033a\u0003\u0002\u0002\u0002\u033c",
    "\u033b\u0003\u0002\u0002\u0002\u033d/\u0003\u0002\u0002\u0002\u033e",
    "\u033f\t\u0003\u0002\u0002\u033f1\u0003\u0002\u0002\u0002\u0340\u0343",
    "\u00056\u001c\u0002\u0341\u0343\u0007 \u0002\u0002\u0342\u0340\u0003",
    "\u0002\u0002\u0002\u0342\u0341\u0003\u0002\u0002\u0002\u03433\u0003",
    "\u0002\u0002\u0002\u0344\u0351\u00056\u001c\u0002\u0345\u0351\u0007",
    "\u000e\u0002\u0002\u0346\u0351\u0007\u001f\u0002\u0002\u0347\u0351\u0007",
    "!\u0002\u0002\u0348\u0351\u0007%\u0002\u0002\u0349\u0351\u0007&\u0002",
    "\u0002\u034a\u0351\u0007\'\u0002\u0002\u034b\u0351\u0007+\u0002\u0002",
    "\u034c\u0351\u0007.\u0002\u0002\u034d\u0351\u00075\u0002\u0002\u034e",
    "\u0351\u00076\u0002\u0002\u034f\u0351\u00077\u0002\u0002\u0350\u0344",
    "\u0003\u0002\u0002\u0002\u0350\u0345\u0003\u0002\u0002\u0002\u0350\u0346",
    "\u0003\u0002\u0002\u0002\u0350\u0347\u0003\u0002\u0002\u0002\u0350\u0348",
    "\u0003\u0002\u0002\u0002\u0350\u0349\u0003\u0002\u0002\u0002\u0350\u034a",
    "\u0003\u0002\u0002\u0002\u0350\u034b\u0003\u0002\u0002\u0002\u0350\u034c",
    "\u0003\u0002\u0002\u0002\u0350\u034d\u0003\u0002\u0002\u0002\u0350\u034e",
    "\u0003\u0002\u0002\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u03515",
    "\u0003\u0002\u0002\u0002\u0352\u036d\u0005:\u001e\u0002\u0353\u036d",
    "\u0005J&\u0002\u0354\u036d\u0005@!\u0002\u0355\u036d\u0007\u0005\u0002",
    "\u0002\u0356\u036d\u0007\u0007\u0002\u0002\u0357\u036d\u0007\b\u0002",
    "\u0002\u0358\u036d\u0007\t\u0002\u0002\u0359\u036d\u0007\n\u0002\u0002",
    "\u035a\u036d\u0007\u000b\u0002\u0002\u035b\u036d\u0007\r\u0002\u0002",
    "\u035c\u036d\u0007\u0003\u0002\u0002\u035d\u036d\u0007\u0004\u0002\u0002",
    "\u035e\u036d\u0007(\u0002\u0002\u035f\u036d\u0007)\u0002\u0002\u0360",
    "\u036d\u0007*\u0002\u0002\u0361\u036d\u0007\"\u0002\u0002\u0362\u036d",
    "\u00078\u0002\u0002\u0363\u036d\u00079\u0002\u0002\u0364\u036d\u0007",
    ":\u0002\u0002\u0365\u036d\u0007;\u0002\u0002\u0366\u036d\u0007<\u0002",
    "\u0002\u0367\u036d\u0007=\u0002\u0002\u0368\u036d\u0007>\u0002\u0002",
    "\u0369\u036d\u0007?\u0002\u0002\u036a\u036d\u0007@\u0002\u0002\u036b",
    "\u036d\u0007\u007f\u0002\u0002\u036c\u0352\u0003\u0002\u0002\u0002\u036c",
    "\u0353\u0003\u0002\u0002\u0002\u036c\u0354\u0003\u0002\u0002\u0002\u036c",
    "\u0355\u0003\u0002\u0002\u0002\u036c\u0356\u0003\u0002\u0002\u0002\u036c",
    "\u0357\u0003\u0002\u0002\u0002\u036c\u0358\u0003\u0002\u0002\u0002\u036c",
    "\u0359\u0003\u0002\u0002\u0002\u036c\u035a\u0003\u0002\u0002\u0002\u036c",
    "\u035b\u0003\u0002\u0002\u0002\u036c\u035c\u0003\u0002\u0002\u0002\u036c",
    "\u035d\u0003\u0002\u0002\u0002\u036c\u035e\u0003\u0002\u0002\u0002\u036c",
    "\u035f\u0003\u0002\u0002\u0002\u036c\u0360\u0003\u0002\u0002\u0002\u036c",
    "\u0361\u0003\u0002\u0002\u0002\u036c\u0362\u0003\u0002\u0002\u0002\u036c",
    "\u0363\u0003\u0002\u0002\u0002\u036c\u0364\u0003\u0002\u0002\u0002\u036c",
    "\u0365\u0003\u0002\u0002\u0002\u036c\u0366\u0003\u0002\u0002\u0002\u036c",
    "\u0367\u0003\u0002\u0002\u0002\u036c\u0368\u0003\u0002\u0002\u0002\u036c",
    "\u0369\u0003\u0002\u0002\u0002\u036c\u036a\u0003\u0002\u0002\u0002\u036c",
    "\u036b\u0003\u0002\u0002\u0002\u036d7\u0003\u0002\u0002\u0002\u036e",
    "\u036f\u0005> \u0002\u036f9\u0003\u0002\u0002\u0002\u0370\u0371\u0007",
    "\f\u0002\u0002\u0371\u0372\t\u0004\u0002\u0002\u0372\u0373\u0005<\u001f",
    "\u0002\u0373\u0374\u0005<\u001f\u0002\u0374\u037a\u0003\u0002\u0002",
    "\u0002\u0375\u0376\u0007\f\u0002\u0002\u0376\u0377\u0005<\u001f\u0002",
    "\u0377\u0378\u0005<\u001f\u0002\u0378\u037a\u0003\u0002\u0002\u0002",
    "\u0379\u0370\u0003\u0002\u0002\u0002\u0379\u0375\u0003\u0002\u0002\u0002",
    "\u037a;\u0003\u0002\u0002\u0002\u037b\u037c\t\u0005\u0002\u0002\u037c",
    "=\u0003\u0002\u0002\u0002\u037d\u037f\u0005@!\u0002\u037e\u037d\u0003",
    "\u0002\u0002\u0002\u037f\u0380\u0003\u0002\u0002\u0002\u0380\u037e\u0003",
    "\u0002\u0002\u0002\u0380\u0381\u0003\u0002\u0002\u0002\u0381?\u0003",
    "\u0002\u0002\u0002\u0382\u0383\t\u0006\u0002\u0002\u0383A\u0003\u0002",
    "\u0002\u0002\u0384\u0385\u0005D#\u0002\u0385C\u0003\u0002\u0002\u0002",
    "\u0386\u0389\u0005J&\u0002\u0387\u0389\u0007;\u0002\u0002\u0388\u0386",
    "\u0003\u0002\u0002\u0002\u0388\u0387\u0003\u0002\u0002\u0002\u0389\u038f",
    "\u0003\u0002\u0002\u0002\u038a\u038e\u0005J&\u0002\u038b\u038e\u0007",
    ";\u0002\u0002\u038c\u038e\u0005@!\u0002\u038d\u038a\u0003\u0002\u0002",
    "\u0002\u038d\u038b\u0003\u0002\u0002\u0002\u038d\u038c\u0003\u0002\u0002",
    "\u0002\u038e\u0391\u0003\u0002\u0002\u0002\u038f\u038d\u0003\u0002\u0002",
    "\u0002\u038f\u0390\u0003\u0002\u0002\u0002\u0390E\u0003\u0002\u0002",
    "\u0002\u0391\u038f\u0003\u0002\u0002\u0002\u0392\u0394\u0005H%\u0002",
    "\u0393\u0392\u0003\u0002\u0002\u0002\u0394\u0395\u0003\u0002\u0002\u0002",
    "\u0395\u0393\u0003\u0002\u0002\u0002\u0395\u0396\u0003\u0002\u0002\u0002",
    "\u0396G\u0003\u0002\u0002\u0002\u0397\u0398\n\u0007\u0002\u0002\u0398",
    "I\u0003\u0002\u0002\u0002\u0399\u039a\t\b\u0002\u0002\u039aK\u0003\u0002",
    "\u0002\u00022TZ_y~\u0087\u0091\u009a\u00a4\u00ad\u00b5\u00b9\u00e4\u00e9",
    "\u0108\u011c\u015a\u015f\u017d\u01cd\u01d7\u01e4\u01f1\u01ff\u020d\u021a",
    "\u0226\u0234\u0245\u0256\u0262\u0266\u0277\u0280\u02cc\u030b\u0317\u0333",
    "\u033c\u0342\u0350\u036c\u0379\u0380\u0388\u038d\u038f\u0395"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ 'null', 'null', 'null', "'\\a'", "'\\c'", "'\\e'",
                     "'\\f'", "'\\n'", "'\\r'", "'\\t'", "'\\'", 'null',
                     "'.'", "'\\C'", "'\\d'", "'\\D'", "'\\h'", "'\\H'",
                     "'\\N'", 'null', 'null', "'\\R'", "'\\s'", "'\\S'",
                     "'\\v'", "'\\V'", "'\\w'", "'\\W'", "'\\X'", "'['",
                     "']'", "'^'", "'-'", 'null', 'null', "'?'", "'+'",
                     "'*'", "'{'", "'}'", "','", "'\\b'", "'\\B'", "'\\A'",
                     "'$'", "'\\Z'", "'\\z'", "'\\G'", "'\\K'", "'\\g'",
                     "'\\k'", "'|'", "'('", "')'", "'<'", "'>'", "'''",
                     "'_'", "':'", "'#'", "'='", "'!'", "'&'", "'a'", "'b'",
                     "'c'", "'d'", "'e'", "'f'", "'g'", "'h'", "'i'", "'j'",
                     "'k'", "'l'", "'m'", "'n'", "'o'", "'p'", "'q'", "'r'",
                     "'s'", "'t'", "'u'", "'v'", "'w'", "'x'", "'y'", "'z'",
                     "'A'", "'B'", "'C'", "'D'", "'E'", "'F'", "'G'", "'H'",
                     "'I'", "'J'", "'K'", "'L'", "'M'", "'N'", "'O'", "'P'",
                     "'Q'", "'R'", "'S'", "'T'", "'U'", "'V'", "'W'", "'X'",
                     "'Y'", "'Z'", "'1'", "'2'", "'3'", "'4'", "'5'", "'6'",
                     "'7'", "'8'", "'9'", "'0'" ];

var symbolicNames = [ 'null', "Quoted", "BlockQuoted", "BellChar", "ControlChar",
                      "EscapeChar", "FormFeed", "NewLine", "CarriageReturn",
                      "Tab", "Backslash", "HexChar", "Dot", "OneDataUnit",
                      "DecimalDigit", "NotDecimalDigit", "HorizontalWhiteSpace",
                      "NotHorizontalWhiteSpace", "NotNewLine", "CharWithProperty",
                      "CharWithoutProperty", "NewLineSequence", "WhiteSpace",
                      "NotWhiteSpace", "VerticalWhiteSpace", "NotVerticalWhiteSpace",
                      "WordChar", "NotWordChar", "ExtendedUnicodeChar",
                      "CharacterClassStart", "CharacterClassEnd", "Caret",
                      "Hyphen", "POSIXNamedSet", "POSIXNegatedNamedSet",
                      "QuestionMark", "Plus", "Star", "OpenBrace", "CloseBrace",
                      "Comma", "WordBoundary", "NonWordBoundary", "StartOfSubject",
                      "EndOfSubjectOrLine", "EndOfSubjectOrLineEndOfSubject",
                      "EndOfSubject", "PreviousMatchInSubject", "ResetStartMatch",
                      "SubroutineOrNamedReferenceStartG", "NamedReferenceStartK",
                      "Pipe", "OpenParen", "CloseParen", "LessThan", "GreaterThan",
                      "SingleQuote", "Underscore", "Colon", "Hash", "Equals",
                      "Exclamation", "Ampersand", "ALC", "BLC", "CLC", "DLC",
                      "ELC", "FLC", "GLC", "HLC", "ILC", "JLC", "KLC", "LLC",
                      "MLC", "NLC", "OLC", "PLC", "QLC", "RLC", "SLC", "TLC",
                      "ULC", "VLC", "WLC", "XLC", "YLC", "ZLC", "AUC", "BUC",
                      "CUC", "DUC", "EUC", "FUC", "GUC", "HUC", "IUC", "JUC",
                      "KUC", "LUC", "MUC", "NUC", "OUC", "PUC", "QUC", "RUC",
                      "SUC", "TUC", "UUC", "VUC", "WUC", "XUC", "YUC", "ZUC",
                      "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9",
                      "D0", "OtherChar" ];

var ruleNames =  [ "parse", "alternation", "expr", "element", "quantifier",
                   "quantifier_type", "character_class", "backreference",
                   "backreference_or_octal", "capture", "non_capture", "comment",
                   "option", "option_flags", "option_flag", "look_around",
                   "subroutine_reference", "conditional", "backtrack_control",
                   "newline_convention", "callout", "atom", "cc_atom", "shared_atom",
                   "literal", "cc_literal", "shared_literal", "number",
                   "octal_char", "octal_digit", "digits", "digit", "name",
                   "alpha_nums", "non_close_parens", "non_close_paren",
                   "letter" ];

function PCREParser (input) {
    antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

PCREParser.prototype = Object.create(antlr4.Parser.prototype);
PCREParser.prototype.constructor = PCREParser;

Object.defineProperty(PCREParser.prototype, "atn", {
    get : function() {
        return atn;
    }
});

PCREParser.EOF = antlr4.Token.EOF;
PCREParser.Quoted = 1;
PCREParser.BlockQuoted = 2;
PCREParser.BellChar = 3;
PCREParser.ControlChar = 4;
PCREParser.EscapeChar = 5;
PCREParser.FormFeed = 6;
PCREParser.NewLine = 7;
PCREParser.CarriageReturn = 8;
PCREParser.Tab = 9;
PCREParser.Backslash = 10;
PCREParser.HexChar = 11;
PCREParser.Dot = 12;
PCREParser.OneDataUnit = 13;
PCREParser.DecimalDigit = 14;
PCREParser.NotDecimalDigit = 15;
PCREParser.HorizontalWhiteSpace = 16;
PCREParser.NotHorizontalWhiteSpace = 17;
PCREParser.NotNewLine = 18;
PCREParser.CharWithProperty = 19;
PCREParser.CharWithoutProperty = 20;
PCREParser.NewLineSequence = 21;
PCREParser.WhiteSpace = 22;
PCREParser.NotWhiteSpace = 23;
PCREParser.VerticalWhiteSpace = 24;
PCREParser.NotVerticalWhiteSpace = 25;
PCREParser.WordChar = 26;
PCREParser.NotWordChar = 27;
PCREParser.ExtendedUnicodeChar = 28;
PCREParser.CharacterClassStart = 29;
PCREParser.CharacterClassEnd = 30;
PCREParser.Caret = 31;
PCREParser.Hyphen = 32;
PCREParser.POSIXNamedSet = 33;
PCREParser.POSIXNegatedNamedSet = 34;
PCREParser.QuestionMark = 35;
PCREParser.Plus = 36;
PCREParser.Star = 37;
PCREParser.OpenBrace = 38;
PCREParser.CloseBrace = 39;
PCREParser.Comma = 40;
PCREParser.WordBoundary = 41;
PCREParser.NonWordBoundary = 42;
PCREParser.StartOfSubject = 43;
PCREParser.EndOfSubjectOrLine = 44;
PCREParser.EndOfSubjectOrLineEndOfSubject = 45;
PCREParser.EndOfSubject = 46;
PCREParser.PreviousMatchInSubject = 47;
PCREParser.ResetStartMatch = 48;
PCREParser.SubroutineOrNamedReferenceStartG = 49;
PCREParser.NamedReferenceStartK = 50;
PCREParser.Pipe = 51;
PCREParser.OpenParen = 52;
PCREParser.CloseParen = 53;
PCREParser.LessThan = 54;
PCREParser.GreaterThan = 55;
PCREParser.SingleQuote = 56;
PCREParser.Underscore = 57;
PCREParser.Colon = 58;
PCREParser.Hash = 59;
PCREParser.Equals = 60;
PCREParser.Exclamation = 61;
PCREParser.Ampersand = 62;
PCREParser.ALC = 63;
PCREParser.BLC = 64;
PCREParser.CLC = 65;
PCREParser.DLC = 66;
PCREParser.ELC = 67;
PCREParser.FLC = 68;
PCREParser.GLC = 69;
PCREParser.HLC = 70;
PCREParser.ILC = 71;
PCREParser.JLC = 72;
PCREParser.KLC = 73;
PCREParser.LLC = 74;
PCREParser.MLC = 75;
PCREParser.NLC = 76;
PCREParser.OLC = 77;
PCREParser.PLC = 78;
PCREParser.QLC = 79;
PCREParser.RLC = 80;
PCREParser.SLC = 81;
PCREParser.TLC = 82;
PCREParser.ULC = 83;
PCREParser.VLC = 84;
PCREParser.WLC = 85;
PCREParser.XLC = 86;
PCREParser.YLC = 87;
PCREParser.ZLC = 88;
PCREParser.AUC = 89;
PCREParser.BUC = 90;
PCREParser.CUC = 91;
PCREParser.DUC = 92;
PCREParser.EUC = 93;
PCREParser.FUC = 94;
PCREParser.GUC = 95;
PCREParser.HUC = 96;
PCREParser.IUC = 97;
PCREParser.JUC = 98;
PCREParser.KUC = 99;
PCREParser.LUC = 100;
PCREParser.MUC = 101;
PCREParser.NUC = 102;
PCREParser.OUC = 103;
PCREParser.PUC = 104;
PCREParser.QUC = 105;
PCREParser.RUC = 106;
PCREParser.SUC = 107;
PCREParser.TUC = 108;
PCREParser.UUC = 109;
PCREParser.VUC = 110;
PCREParser.WUC = 111;
PCREParser.XUC = 112;
PCREParser.YUC = 113;
PCREParser.ZUC = 114;
PCREParser.D1 = 115;
PCREParser.D2 = 116;
PCREParser.D3 = 117;
PCREParser.D4 = 118;
PCREParser.D5 = 119;
PCREParser.D6 = 120;
PCREParser.D7 = 121;
PCREParser.D8 = 122;
PCREParser.D9 = 123;
PCREParser.D0 = 124;
PCREParser.OtherChar = 125;

PCREParser.RULE_parse = 0;
PCREParser.RULE_alternation = 1;
PCREParser.RULE_expr = 2;
PCREParser.RULE_element = 3;
PCREParser.RULE_quantifier = 4;
PCREParser.RULE_quantifier_type = 5;
PCREParser.RULE_character_class = 6;
PCREParser.RULE_backreference = 7;
PCREParser.RULE_backreference_or_octal = 8;
PCREParser.RULE_capture = 9;
PCREParser.RULE_non_capture = 10;
PCREParser.RULE_comment = 11;
PCREParser.RULE_option = 12;
PCREParser.RULE_option_flags = 13;
PCREParser.RULE_option_flag = 14;
PCREParser.RULE_look_around = 15;
PCREParser.RULE_subroutine_reference = 16;
PCREParser.RULE_conditional = 17;
PCREParser.RULE_backtrack_control = 18;
PCREParser.RULE_newline_convention = 19;
PCREParser.RULE_callout = 20;
PCREParser.RULE_atom = 21;
PCREParser.RULE_cc_atom = 22;
PCREParser.RULE_shared_atom = 23;
PCREParser.RULE_literal = 24;
PCREParser.RULE_cc_literal = 25;
PCREParser.RULE_shared_literal = 26;
PCREParser.RULE_number = 27;
PCREParser.RULE_octal_char = 28;
PCREParser.RULE_octal_digit = 29;
PCREParser.RULE_digits = 30;
PCREParser.RULE_digit = 31;
PCREParser.RULE_name = 32;
PCREParser.RULE_alpha_nums = 33;
PCREParser.RULE_non_close_parens = 34;
PCREParser.RULE_non_close_paren = 35;
PCREParser.RULE_letter = 36;

function ParseContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_parse;
    return this;
}

ParseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParseContext.prototype.constructor = ParseContext;

ParseContext.prototype.alternation = function() {
    return this.getTypedRuleContext(AlternationContext,0);
};

ParseContext.prototype.EOF = function() {
    return this.getToken(PCREParser.EOF, 0);
};

ParseContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterParse(this);
    }
};

ParseContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitParse(this);
    }
};




PCREParser.ParseContext = ParseContext;

PCREParser.prototype.parse = function() {

    var localctx = new ParseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, PCREParser.RULE_parse);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 74;
        this.alternation();
        this.state = 75;
        this.match(PCREParser.EOF);
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AlternationContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_alternation;
    return this;
}

AlternationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlternationContext.prototype.constructor = AlternationContext;

AlternationContext.prototype.expr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ExprContext);
    } else {
        return this.getTypedRuleContext(ExprContext,i);
    }
};

AlternationContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterAlternation(this);
    }
};

AlternationContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitAlternation(this);
    }
};




PCREParser.AlternationContext = AlternationContext;

PCREParser.prototype.alternation = function() {

    var localctx = new AlternationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, PCREParser.RULE_alternation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 77;
        this.expr();
        this.state = 82;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,0,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 78;
                this.match(PCREParser.Pipe);
                this.state = 79;
                this.expr();
            }
            this.state = 84;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,0,this._ctx);
        }

    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExprContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_expr;
    return this;
}

ExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExprContext.prototype.constructor = ExprContext;

ExprContext.prototype.element = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ElementContext);
    } else {
        return this.getTypedRuleContext(ElementContext,i);
    }
};

ExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterExpr(this);
    }
};

ExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitExpr(this);
    }
};




PCREParser.ExprContext = ExprContext;

PCREParser.prototype.expr = function() {

    var localctx = new ExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, PCREParser.RULE_expr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 88;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.OneDataUnit) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.ExtendedUnicodeChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.CharacterClassEnd) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.NonWordBoundary - 32)) | (1 << (PCREParser.StartOfSubject - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.EndOfSubjectOrLineEndOfSubject - 32)) | (1 << (PCREParser.EndOfSubject - 32)) | (1 << (PCREParser.PreviousMatchInSubject - 32)) | (1 << (PCREParser.ResetStartMatch - 32)) | (1 << (PCREParser.SubroutineOrNamedReferenceStartG - 32)) | (1 << (PCREParser.NamedReferenceStartK - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0)) {
            this.state = 85;
            this.element();
            this.state = 90;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ElementContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_element;
    return this;
}

ElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ElementContext.prototype.constructor = ElementContext;

ElementContext.prototype.atom = function() {
    return this.getTypedRuleContext(AtomContext,0);
};

ElementContext.prototype.quantifier = function() {
    return this.getTypedRuleContext(QuantifierContext,0);
};

ElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterElement(this);
    }
};

ElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitElement(this);
    }
};




PCREParser.ElementContext = ElementContext;

PCREParser.prototype.element = function() {

    var localctx = new ElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, PCREParser.RULE_element);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 91;
        this.atom();
        this.state = 93;
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        if(la_===1) {
            this.state = 92;
            this.quantifier();

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function QuantifierContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_quantifier;
    return this;
}

QuantifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QuantifierContext.prototype.constructor = QuantifierContext;

QuantifierContext.prototype.quantifier_type = function() {
    return this.getTypedRuleContext(Quantifier_typeContext,0);
};

QuantifierContext.prototype.number = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberContext);
    } else {
        return this.getTypedRuleContext(NumberContext,i);
    }
};

QuantifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterQuantifier(this);
    }
};

QuantifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitQuantifier(this);
    }
};




PCREParser.QuantifierContext = QuantifierContext;

PCREParser.prototype.quantifier = function() {

    var localctx = new QuantifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, PCREParser.RULE_quantifier);
    try {
        this.state = 119;
        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 95;
            this.match(PCREParser.QuestionMark);
            this.state = 96;
            this.quantifier_type();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 97;
            this.match(PCREParser.Plus);
            this.state = 98;
            this.quantifier_type();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 99;
            this.match(PCREParser.Star);
            this.state = 100;
            this.quantifier_type();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 101;
            this.match(PCREParser.OpenBrace);
            this.state = 102;
            this.number();
            this.state = 103;
            this.match(PCREParser.CloseBrace);
            this.state = 104;
            this.quantifier_type();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 106;
            this.match(PCREParser.OpenBrace);
            this.state = 107;
            this.number();
            this.state = 108;
            this.match(PCREParser.Comma);
            this.state = 109;
            this.match(PCREParser.CloseBrace);
            this.state = 110;
            this.quantifier_type();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 112;
            this.match(PCREParser.OpenBrace);
            this.state = 113;
            this.number();
            this.state = 114;
            this.match(PCREParser.Comma);
            this.state = 115;
            this.number();
            this.state = 116;
            this.match(PCREParser.CloseBrace);
            this.state = 117;
            this.quantifier_type();
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Quantifier_typeContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_quantifier_type;
    return this;
}

Quantifier_typeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Quantifier_typeContext.prototype.constructor = Quantifier_typeContext;


Quantifier_typeContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterQuantifier_type(this);
    }
};

Quantifier_typeContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitQuantifier_type(this);
    }
};




PCREParser.Quantifier_typeContext = Quantifier_typeContext;

PCREParser.prototype.quantifier_type = function() {

    var localctx = new Quantifier_typeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, PCREParser.RULE_quantifier_type);
    try {
        this.state = 124;
        switch(this._input.LA(1)) {
        case PCREParser.Plus:
            this.enterOuterAlt(localctx, 1);
            this.state = 121;
            this.match(PCREParser.Plus);
            break;
        case PCREParser.QuestionMark:
            this.enterOuterAlt(localctx, 2);
            this.state = 122;
            this.match(PCREParser.QuestionMark);
            break;
        case PCREParser.EOF:
        case PCREParser.Quoted:
        case PCREParser.BlockQuoted:
        case PCREParser.BellChar:
        case PCREParser.ControlChar:
        case PCREParser.EscapeChar:
        case PCREParser.FormFeed:
        case PCREParser.NewLine:
        case PCREParser.CarriageReturn:
        case PCREParser.Tab:
        case PCREParser.Backslash:
        case PCREParser.HexChar:
        case PCREParser.Dot:
        case PCREParser.OneDataUnit:
        case PCREParser.DecimalDigit:
        case PCREParser.NotDecimalDigit:
        case PCREParser.HorizontalWhiteSpace:
        case PCREParser.NotHorizontalWhiteSpace:
        case PCREParser.NotNewLine:
        case PCREParser.CharWithProperty:
        case PCREParser.CharWithoutProperty:
        case PCREParser.NewLineSequence:
        case PCREParser.WhiteSpace:
        case PCREParser.NotWhiteSpace:
        case PCREParser.VerticalWhiteSpace:
        case PCREParser.NotVerticalWhiteSpace:
        case PCREParser.WordChar:
        case PCREParser.NotWordChar:
        case PCREParser.ExtendedUnicodeChar:
        case PCREParser.CharacterClassStart:
        case PCREParser.CharacterClassEnd:
        case PCREParser.Caret:
        case PCREParser.Hyphen:
        case PCREParser.POSIXNamedSet:
        case PCREParser.POSIXNegatedNamedSet:
        case PCREParser.OpenBrace:
        case PCREParser.CloseBrace:
        case PCREParser.Comma:
        case PCREParser.WordBoundary:
        case PCREParser.NonWordBoundary:
        case PCREParser.StartOfSubject:
        case PCREParser.EndOfSubjectOrLine:
        case PCREParser.EndOfSubjectOrLineEndOfSubject:
        case PCREParser.EndOfSubject:
        case PCREParser.PreviousMatchInSubject:
        case PCREParser.ResetStartMatch:
        case PCREParser.SubroutineOrNamedReferenceStartG:
        case PCREParser.NamedReferenceStartK:
        case PCREParser.Pipe:
        case PCREParser.OpenParen:
        case PCREParser.CloseParen:
        case PCREParser.LessThan:
        case PCREParser.GreaterThan:
        case PCREParser.SingleQuote:
        case PCREParser.Underscore:
        case PCREParser.Colon:
        case PCREParser.Hash:
        case PCREParser.Equals:
        case PCREParser.Exclamation:
        case PCREParser.Ampersand:
        case PCREParser.ALC:
        case PCREParser.BLC:
        case PCREParser.CLC:
        case PCREParser.DLC:
        case PCREParser.ELC:
        case PCREParser.FLC:
        case PCREParser.GLC:
        case PCREParser.HLC:
        case PCREParser.ILC:
        case PCREParser.JLC:
        case PCREParser.KLC:
        case PCREParser.LLC:
        case PCREParser.MLC:
        case PCREParser.NLC:
        case PCREParser.OLC:
        case PCREParser.PLC:
        case PCREParser.QLC:
        case PCREParser.RLC:
        case PCREParser.SLC:
        case PCREParser.TLC:
        case PCREParser.ULC:
        case PCREParser.VLC:
        case PCREParser.WLC:
        case PCREParser.XLC:
        case PCREParser.YLC:
        case PCREParser.ZLC:
        case PCREParser.AUC:
        case PCREParser.BUC:
        case PCREParser.CUC:
        case PCREParser.DUC:
        case PCREParser.EUC:
        case PCREParser.FUC:
        case PCREParser.GUC:
        case PCREParser.HUC:
        case PCREParser.IUC:
        case PCREParser.JUC:
        case PCREParser.KUC:
        case PCREParser.LUC:
        case PCREParser.MUC:
        case PCREParser.NUC:
        case PCREParser.OUC:
        case PCREParser.PUC:
        case PCREParser.QUC:
        case PCREParser.RUC:
        case PCREParser.SUC:
        case PCREParser.TUC:
        case PCREParser.UUC:
        case PCREParser.VUC:
        case PCREParser.WUC:
        case PCREParser.XUC:
        case PCREParser.YUC:
        case PCREParser.ZUC:
        case PCREParser.D1:
        case PCREParser.D2:
        case PCREParser.D3:
        case PCREParser.D4:
        case PCREParser.D5:
        case PCREParser.D6:
        case PCREParser.D7:
        case PCREParser.D8:
        case PCREParser.D9:
        case PCREParser.D0:
        case PCREParser.OtherChar:
            this.enterOuterAlt(localctx, 3);

            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Character_classContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_character_class;
    return this;
}

Character_classContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Character_classContext.prototype.constructor = Character_classContext;

Character_classContext.prototype.CharacterClassEnd = function() {
    return this.getToken(PCREParser.CharacterClassEnd, 0);
};

Character_classContext.prototype.Hyphen = function() {
    return this.getToken(PCREParser.Hyphen, 0);
};

Character_classContext.prototype.cc_atom = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cc_atomContext);
    } else {
        return this.getTypedRuleContext(Cc_atomContext,i);
    }
};

Character_classContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterCharacter_class(this);
    }
};

Character_classContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitCharacter_class(this);
    }
};




PCREParser.Character_classContext = Character_classContext;

PCREParser.prototype.character_class = function() {

    var localctx = new Character_classContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, PCREParser.RULE_character_class);
    var _la = 0; // Token type
    try {
        this.state = 183;
        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 126;
            this.match(PCREParser.CharacterClassStart);
            this.state = 127;
            this.match(PCREParser.Caret);
            this.state = 128;
            this.match(PCREParser.CharacterClassEnd);
            this.state = 129;
            this.match(PCREParser.Hyphen);
            this.state = 131;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 130;
                this.cc_atom();
                this.state = 133;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
            this.state = 135;
            this.match(PCREParser.CharacterClassEnd);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 137;
            this.match(PCREParser.CharacterClassStart);
            this.state = 138;
            this.match(PCREParser.Caret);
            this.state = 139;
            this.match(PCREParser.CharacterClassEnd);
            this.state = 143;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0)) {
                this.state = 140;
                this.cc_atom();
                this.state = 145;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 146;
            this.match(PCREParser.CharacterClassEnd);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 147;
            this.match(PCREParser.CharacterClassStart);
            this.state = 148;
            this.match(PCREParser.Caret);
            this.state = 150;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 149;
                this.cc_atom();
                this.state = 152;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
            this.state = 154;
            this.match(PCREParser.CharacterClassEnd);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 156;
            this.match(PCREParser.CharacterClassStart);
            this.state = 157;
            this.match(PCREParser.CharacterClassEnd);
            this.state = 158;
            this.match(PCREParser.Hyphen);
            this.state = 160;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 159;
                this.cc_atom();
                this.state = 162;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
            this.state = 164;
            this.match(PCREParser.CharacterClassEnd);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 166;
            this.match(PCREParser.CharacterClassStart);
            this.state = 167;
            this.match(PCREParser.CharacterClassEnd);
            this.state = 171;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0)) {
                this.state = 168;
                this.cc_atom();
                this.state = 173;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 174;
            this.match(PCREParser.CharacterClassEnd);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 175;
            this.match(PCREParser.CharacterClassStart);
            this.state = 177;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 176;
                this.cc_atom();
                this.state = 179;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.CloseParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
            this.state = 181;
            this.match(PCREParser.CharacterClassEnd);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BackreferenceContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_backreference;
    return this;
}

BackreferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BackreferenceContext.prototype.constructor = BackreferenceContext;

BackreferenceContext.prototype.backreference_or_octal = function() {
    return this.getTypedRuleContext(Backreference_or_octalContext,0);
};

BackreferenceContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

BackreferenceContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

BackreferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterBackreference(this);
    }
};

BackreferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitBackreference(this);
    }
};




PCREParser.BackreferenceContext = BackreferenceContext;

PCREParser.prototype.backreference = function() {

    var localctx = new BackreferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, PCREParser.RULE_backreference);
    try {
        this.state = 226;
        var la_ = this._interp.adaptivePredict(this._input,12,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 185;
            this.backreference_or_octal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 186;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 187;
            this.number();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 188;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 189;
            this.match(PCREParser.OpenBrace);
            this.state = 190;
            this.number();
            this.state = 191;
            this.match(PCREParser.CloseBrace);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 193;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 194;
            this.match(PCREParser.OpenBrace);
            this.state = 195;
            this.match(PCREParser.Hyphen);
            this.state = 196;
            this.number();
            this.state = 197;
            this.match(PCREParser.CloseBrace);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 199;
            this.match(PCREParser.NamedReferenceStartK);
            this.state = 200;
            this.match(PCREParser.LessThan);
            this.state = 201;
            this.name();
            this.state = 202;
            this.match(PCREParser.GreaterThan);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 204;
            this.match(PCREParser.NamedReferenceStartK);
            this.state = 205;
            this.match(PCREParser.SingleQuote);
            this.state = 206;
            this.name();
            this.state = 207;
            this.match(PCREParser.SingleQuote);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 209;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 210;
            this.match(PCREParser.OpenBrace);
            this.state = 211;
            this.name();
            this.state = 212;
            this.match(PCREParser.CloseBrace);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 214;
            this.match(PCREParser.NamedReferenceStartK);
            this.state = 215;
            this.match(PCREParser.OpenBrace);
            this.state = 216;
            this.name();
            this.state = 217;
            this.match(PCREParser.CloseBrace);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 219;
            this.match(PCREParser.OpenParen);
            this.state = 220;
            this.match(PCREParser.QuestionMark);
            this.state = 221;
            this.match(PCREParser.PUC);
            this.state = 222;
            this.match(PCREParser.Equals);
            this.state = 223;
            this.name();
            this.state = 224;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backreference_or_octalContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_backreference_or_octal;
    return this;
}

Backreference_or_octalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backreference_or_octalContext.prototype.constructor = Backreference_or_octalContext;

Backreference_or_octalContext.prototype.octal_char = function() {
    return this.getTypedRuleContext(Octal_charContext,0);
};

Backreference_or_octalContext.prototype.Backslash = function() {
    return this.getToken(PCREParser.Backslash, 0);
};

Backreference_or_octalContext.prototype.digit = function() {
    return this.getTypedRuleContext(DigitContext,0);
};

Backreference_or_octalContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterBackreference_or_octal(this);
    }
};

Backreference_or_octalContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitBackreference_or_octal(this);
    }
};




PCREParser.Backreference_or_octalContext = Backreference_or_octalContext;

PCREParser.prototype.backreference_or_octal = function() {

    var localctx = new Backreference_or_octalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, PCREParser.RULE_backreference_or_octal);
    try {
        this.state = 231;
        var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 228;
            this.octal_char();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 229;
            this.match(PCREParser.Backslash);
            this.state = 230;
            this.digit();
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CaptureContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_capture;
    return this;
}

CaptureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CaptureContext.prototype.constructor = CaptureContext;

CaptureContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

CaptureContext.prototype.alternation = function() {
    return this.getTypedRuleContext(AlternationContext,0);
};

CaptureContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterCapture(this);
    }
};

CaptureContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitCapture(this);
    }
};




PCREParser.CaptureContext = CaptureContext;

PCREParser.prototype.capture = function() {

    var localctx = new CaptureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, PCREParser.RULE_capture);
    try {
        this.state = 262;
        var la_ = this._interp.adaptivePredict(this._input,14,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 233;
            this.match(PCREParser.OpenParen);
            this.state = 234;
            this.match(PCREParser.QuestionMark);
            this.state = 235;
            this.match(PCREParser.LessThan);
            this.state = 236;
            this.name();
            this.state = 237;
            this.match(PCREParser.GreaterThan);
            this.state = 238;
            this.alternation();
            this.state = 239;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 241;
            this.match(PCREParser.OpenParen);
            this.state = 242;
            this.match(PCREParser.QuestionMark);
            this.state = 243;
            this.match(PCREParser.SingleQuote);
            this.state = 244;
            this.name();
            this.state = 245;
            this.match(PCREParser.SingleQuote);
            this.state = 246;
            this.alternation();
            this.state = 247;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 249;
            this.match(PCREParser.OpenParen);
            this.state = 250;
            this.match(PCREParser.QuestionMark);
            this.state = 251;
            this.match(PCREParser.PUC);
            this.state = 252;
            this.match(PCREParser.LessThan);
            this.state = 253;
            this.name();
            this.state = 254;
            this.match(PCREParser.GreaterThan);
            this.state = 255;
            this.alternation();
            this.state = 256;
            this.match(PCREParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 258;
            this.match(PCREParser.OpenParen);
            this.state = 259;
            this.alternation();
            this.state = 260;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_captureContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_non_capture;
    return this;
}

Non_captureContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_captureContext.prototype.constructor = Non_captureContext;

Non_captureContext.prototype.alternation = function() {
    return this.getTypedRuleContext(AlternationContext,0);
};

Non_captureContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterNon_capture(this);
    }
};

Non_captureContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitNon_capture(this);
    }
};




PCREParser.Non_captureContext = Non_captureContext;

PCREParser.prototype.non_capture = function() {

    var localctx = new Non_captureContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, PCREParser.RULE_non_capture);
    try {
        this.state = 282;
        var la_ = this._interp.adaptivePredict(this._input,15,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 264;
            this.match(PCREParser.OpenParen);
            this.state = 265;
            this.match(PCREParser.QuestionMark);
            this.state = 266;
            this.match(PCREParser.Colon);
            this.state = 267;
            this.alternation();
            this.state = 268;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 270;
            this.match(PCREParser.OpenParen);
            this.state = 271;
            this.match(PCREParser.QuestionMark);
            this.state = 272;
            this.match(PCREParser.Pipe);
            this.state = 273;
            this.alternation();
            this.state = 274;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 276;
            this.match(PCREParser.OpenParen);
            this.state = 277;
            this.match(PCREParser.QuestionMark);
            this.state = 278;
            this.match(PCREParser.GreaterThan);
            this.state = 279;
            this.alternation();
            this.state = 280;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommentContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_comment;
    return this;
}

CommentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommentContext.prototype.constructor = CommentContext;

CommentContext.prototype.non_close_parens = function() {
    return this.getTypedRuleContext(Non_close_parensContext,0);
};

CommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterComment(this);
    }
};

CommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitComment(this);
    }
};




PCREParser.CommentContext = CommentContext;

PCREParser.prototype.comment = function() {

    var localctx = new CommentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, PCREParser.RULE_comment);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(PCREParser.OpenParen);
        this.state = 285;
        this.match(PCREParser.QuestionMark);
        this.state = 286;
        this.match(PCREParser.Hash);
        this.state = 287;
        this.non_close_parens();
        this.state = 288;
        this.match(PCREParser.CloseParen);
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_option;
    return this;
}

OptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionContext.prototype.constructor = OptionContext;

OptionContext.prototype.option_flags = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Option_flagsContext);
    } else {
        return this.getTypedRuleContext(Option_flagsContext,i);
    }
};

OptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterOption(this);
    }
};

OptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitOption(this);
    }
};




PCREParser.OptionContext = OptionContext;

PCREParser.prototype.option = function() {

    var localctx = new OptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, PCREParser.RULE_option);
    try {
        this.state = 344;
        var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 290;
            this.match(PCREParser.OpenParen);
            this.state = 291;
            this.match(PCREParser.QuestionMark);
            this.state = 292;
            this.option_flags();
            this.state = 293;
            this.match(PCREParser.Hyphen);
            this.state = 294;
            this.option_flags();
            this.state = 295;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 297;
            this.match(PCREParser.OpenParen);
            this.state = 298;
            this.match(PCREParser.QuestionMark);
            this.state = 299;
            this.option_flags();
            this.state = 300;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 302;
            this.match(PCREParser.OpenParen);
            this.state = 303;
            this.match(PCREParser.QuestionMark);
            this.state = 304;
            this.match(PCREParser.Hyphen);
            this.state = 305;
            this.option_flags();
            this.state = 306;
            this.match(PCREParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 308;
            this.match(PCREParser.OpenParen);
            this.state = 309;
            this.match(PCREParser.Star);
            this.state = 310;
            this.match(PCREParser.NUC);
            this.state = 311;
            this.match(PCREParser.OUC);
            this.state = 312;
            this.match(PCREParser.Underscore);
            this.state = 313;
            this.match(PCREParser.SUC);
            this.state = 314;
            this.match(PCREParser.TUC);
            this.state = 315;
            this.match(PCREParser.AUC);
            this.state = 316;
            this.match(PCREParser.RUC);
            this.state = 317;
            this.match(PCREParser.TUC);
            this.state = 318;
            this.match(PCREParser.Underscore);
            this.state = 319;
            this.match(PCREParser.OUC);
            this.state = 320;
            this.match(PCREParser.PUC);
            this.state = 321;
            this.match(PCREParser.TUC);
            this.state = 322;
            this.match(PCREParser.CloseParen);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 323;
            this.match(PCREParser.OpenParen);
            this.state = 324;
            this.match(PCREParser.Star);
            this.state = 325;
            this.match(PCREParser.UUC);
            this.state = 326;
            this.match(PCREParser.TUC);
            this.state = 327;
            this.match(PCREParser.FUC);
            this.state = 328;
            this.match(PCREParser.D8);
            this.state = 329;
            this.match(PCREParser.CloseParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 330;
            this.match(PCREParser.OpenParen);
            this.state = 331;
            this.match(PCREParser.Star);
            this.state = 332;
            this.match(PCREParser.UUC);
            this.state = 333;
            this.match(PCREParser.TUC);
            this.state = 334;
            this.match(PCREParser.FUC);
            this.state = 335;
            this.match(PCREParser.D1);
            this.state = 336;
            this.match(PCREParser.D6);
            this.state = 337;
            this.match(PCREParser.CloseParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 338;
            this.match(PCREParser.OpenParen);
            this.state = 339;
            this.match(PCREParser.Star);
            this.state = 340;
            this.match(PCREParser.UUC);
            this.state = 341;
            this.match(PCREParser.CUC);
            this.state = 342;
            this.match(PCREParser.PUC);
            this.state = 343;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Option_flagsContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_option_flags;
    return this;
}

Option_flagsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Option_flagsContext.prototype.constructor = Option_flagsContext;

Option_flagsContext.prototype.option_flag = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Option_flagContext);
    } else {
        return this.getTypedRuleContext(Option_flagContext,i);
    }
};

Option_flagsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterOption_flags(this);
    }
};

Option_flagsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitOption_flags(this);
    }
};




PCREParser.Option_flagsContext = Option_flagsContext;

PCREParser.prototype.option_flags = function() {

    var localctx = new Option_flagsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, PCREParser.RULE_option_flags);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 347;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 346;
            this.option_flag();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (PCREParser.ILC - 71)) | (1 << (PCREParser.MLC - 71)) | (1 << (PCREParser.SLC - 71)) | (1 << (PCREParser.XLC - 71)) | (1 << (PCREParser.JUC - 71)))) !== 0) || _la===PCREParser.UUC);
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Option_flagContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_option_flag;
    return this;
}

Option_flagContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Option_flagContext.prototype.constructor = Option_flagContext;


Option_flagContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterOption_flag(this);
    }
};

Option_flagContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitOption_flag(this);
    }
};




PCREParser.Option_flagContext = Option_flagContext;

PCREParser.prototype.option_flag = function() {

    var localctx = new Option_flagContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, PCREParser.RULE_option_flag);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        _la = this._input.LA(1);
        if(!(((((_la - 71)) & ~0x1f) == 0 && ((1 << (_la - 71)) & ((1 << (PCREParser.ILC - 71)) | (1 << (PCREParser.MLC - 71)) | (1 << (PCREParser.SLC - 71)) | (1 << (PCREParser.XLC - 71)) | (1 << (PCREParser.JUC - 71)))) !== 0) || _la===PCREParser.UUC)) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Look_aroundContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_look_around;
    return this;
}

Look_aroundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Look_aroundContext.prototype.constructor = Look_aroundContext;

Look_aroundContext.prototype.alternation = function() {
    return this.getTypedRuleContext(AlternationContext,0);
};

Look_aroundContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterLook_around(this);
    }
};

Look_aroundContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitLook_around(this);
    }
};




PCREParser.Look_aroundContext = Look_aroundContext;

PCREParser.prototype.look_around = function() {

    var localctx = new Look_aroundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, PCREParser.RULE_look_around);
    try {
        this.state = 379;
        var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 353;
            this.match(PCREParser.OpenParen);
            this.state = 354;
            this.match(PCREParser.QuestionMark);
            this.state = 355;
            this.match(PCREParser.Equals);
            this.state = 356;
            this.alternation();
            this.state = 357;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 359;
            this.match(PCREParser.OpenParen);
            this.state = 360;
            this.match(PCREParser.QuestionMark);
            this.state = 361;
            this.match(PCREParser.Exclamation);
            this.state = 362;
            this.alternation();
            this.state = 363;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 365;
            this.match(PCREParser.OpenParen);
            this.state = 366;
            this.match(PCREParser.QuestionMark);
            this.state = 367;
            this.match(PCREParser.LessThan);
            this.state = 368;
            this.match(PCREParser.Equals);
            this.state = 369;
            this.alternation();
            this.state = 370;
            this.match(PCREParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 372;
            this.match(PCREParser.OpenParen);
            this.state = 373;
            this.match(PCREParser.QuestionMark);
            this.state = 374;
            this.match(PCREParser.LessThan);
            this.state = 375;
            this.match(PCREParser.Exclamation);
            this.state = 376;
            this.alternation();
            this.state = 377;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Subroutine_referenceContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_subroutine_reference;
    return this;
}

Subroutine_referenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Subroutine_referenceContext.prototype.constructor = Subroutine_referenceContext;

Subroutine_referenceContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

Subroutine_referenceContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

Subroutine_referenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterSubroutine_reference(this);
    }
};

Subroutine_referenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitSubroutine_reference(this);
    }
};




PCREParser.Subroutine_referenceContext = Subroutine_referenceContext;

PCREParser.prototype.subroutine_reference = function() {

    var localctx = new Subroutine_referenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, PCREParser.RULE_subroutine_reference);
    try {
        this.state = 459;
        var la_ = this._interp.adaptivePredict(this._input,19,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 381;
            this.match(PCREParser.OpenParen);
            this.state = 382;
            this.match(PCREParser.QuestionMark);
            this.state = 383;
            this.match(PCREParser.RUC);
            this.state = 384;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 385;
            this.match(PCREParser.OpenParen);
            this.state = 386;
            this.match(PCREParser.QuestionMark);
            this.state = 387;
            this.number();
            this.state = 388;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 390;
            this.match(PCREParser.OpenParen);
            this.state = 391;
            this.match(PCREParser.QuestionMark);
            this.state = 392;
            this.match(PCREParser.Plus);
            this.state = 393;
            this.number();
            this.state = 394;
            this.match(PCREParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 396;
            this.match(PCREParser.OpenParen);
            this.state = 397;
            this.match(PCREParser.QuestionMark);
            this.state = 398;
            this.match(PCREParser.Hyphen);
            this.state = 399;
            this.number();
            this.state = 400;
            this.match(PCREParser.CloseParen);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 402;
            this.match(PCREParser.OpenParen);
            this.state = 403;
            this.match(PCREParser.QuestionMark);
            this.state = 404;
            this.match(PCREParser.Ampersand);
            this.state = 405;
            this.name();
            this.state = 406;
            this.match(PCREParser.CloseParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 408;
            this.match(PCREParser.OpenParen);
            this.state = 409;
            this.match(PCREParser.QuestionMark);
            this.state = 410;
            this.match(PCREParser.PUC);
            this.state = 411;
            this.match(PCREParser.GreaterThan);
            this.state = 412;
            this.name();
            this.state = 413;
            this.match(PCREParser.CloseParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 415;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 416;
            this.match(PCREParser.LessThan);
            this.state = 417;
            this.name();
            this.state = 418;
            this.match(PCREParser.GreaterThan);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 420;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 421;
            this.match(PCREParser.SingleQuote);
            this.state = 422;
            this.name();
            this.state = 423;
            this.match(PCREParser.SingleQuote);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 425;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 426;
            this.match(PCREParser.LessThan);
            this.state = 427;
            this.number();
            this.state = 428;
            this.match(PCREParser.GreaterThan);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 430;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 431;
            this.match(PCREParser.SingleQuote);
            this.state = 432;
            this.number();
            this.state = 433;
            this.match(PCREParser.SingleQuote);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 435;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 436;
            this.match(PCREParser.LessThan);
            this.state = 437;
            this.match(PCREParser.Plus);
            this.state = 438;
            this.number();
            this.state = 439;
            this.match(PCREParser.GreaterThan);
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 441;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 442;
            this.match(PCREParser.SingleQuote);
            this.state = 443;
            this.match(PCREParser.Plus);
            this.state = 444;
            this.number();
            this.state = 445;
            this.match(PCREParser.SingleQuote);
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 447;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 448;
            this.match(PCREParser.LessThan);
            this.state = 449;
            this.match(PCREParser.Hyphen);
            this.state = 450;
            this.number();
            this.state = 451;
            this.match(PCREParser.GreaterThan);
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 453;
            this.match(PCREParser.SubroutineOrNamedReferenceStartG);
            this.state = 454;
            this.match(PCREParser.SingleQuote);
            this.state = 455;
            this.match(PCREParser.Hyphen);
            this.state = 456;
            this.number();
            this.state = 457;
            this.match(PCREParser.SingleQuote);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ConditionalContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_conditional;
    return this;
}

ConditionalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ConditionalContext.prototype.constructor = ConditionalContext;

ConditionalContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

ConditionalContext.prototype.alternation = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlternationContext);
    } else {
        return this.getTypedRuleContext(AlternationContext,i);
    }
};

ConditionalContext.prototype.name = function() {
    return this.getTypedRuleContext(NameContext,0);
};

ConditionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterConditional(this);
    }
};

ConditionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitConditional(this);
    }
};




PCREParser.ConditionalContext = ConditionalContext;

PCREParser.prototype.conditional = function() {

    var localctx = new ConditionalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, PCREParser.RULE_conditional);
    var _la = 0; // Token type
    try {
        this.state = 612;
        var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 461;
            this.match(PCREParser.OpenParen);
            this.state = 462;
            this.match(PCREParser.QuestionMark);
            this.state = 463;
            this.match(PCREParser.OpenParen);
            this.state = 464;
            this.number();
            this.state = 465;
            this.match(PCREParser.CloseParen);
            this.state = 466;
            this.alternation();
            this.state = 469;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 467;
                this.match(PCREParser.Pipe);
                this.state = 468;
                this.alternation();
            }

            this.state = 471;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 473;
            this.match(PCREParser.OpenParen);
            this.state = 474;
            this.match(PCREParser.QuestionMark);
            this.state = 475;
            this.match(PCREParser.OpenParen);
            this.state = 476;
            this.match(PCREParser.Plus);
            this.state = 477;
            this.number();
            this.state = 478;
            this.match(PCREParser.CloseParen);
            this.state = 479;
            this.alternation();
            this.state = 482;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 480;
                this.match(PCREParser.Pipe);
                this.state = 481;
                this.alternation();
            }

            this.state = 484;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 486;
            this.match(PCREParser.OpenParen);
            this.state = 487;
            this.match(PCREParser.QuestionMark);
            this.state = 488;
            this.match(PCREParser.OpenParen);
            this.state = 489;
            this.match(PCREParser.Hyphen);
            this.state = 490;
            this.number();
            this.state = 491;
            this.match(PCREParser.CloseParen);
            this.state = 492;
            this.alternation();
            this.state = 495;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 493;
                this.match(PCREParser.Pipe);
                this.state = 494;
                this.alternation();
            }

            this.state = 497;
            this.match(PCREParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 499;
            this.match(PCREParser.OpenParen);
            this.state = 500;
            this.match(PCREParser.QuestionMark);
            this.state = 501;
            this.match(PCREParser.OpenParen);
            this.state = 502;
            this.match(PCREParser.LessThan);
            this.state = 503;
            this.name();
            this.state = 504;
            this.match(PCREParser.GreaterThan);
            this.state = 505;
            this.match(PCREParser.CloseParen);
            this.state = 506;
            this.alternation();
            this.state = 509;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 507;
                this.match(PCREParser.Pipe);
                this.state = 508;
                this.alternation();
            }

            this.state = 511;
            this.match(PCREParser.CloseParen);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 513;
            this.match(PCREParser.OpenParen);
            this.state = 514;
            this.match(PCREParser.QuestionMark);
            this.state = 515;
            this.match(PCREParser.OpenParen);
            this.state = 516;
            this.match(PCREParser.SingleQuote);
            this.state = 517;
            this.name();
            this.state = 518;
            this.match(PCREParser.SingleQuote);
            this.state = 519;
            this.match(PCREParser.CloseParen);
            this.state = 520;
            this.alternation();
            this.state = 523;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 521;
                this.match(PCREParser.Pipe);
                this.state = 522;
                this.alternation();
            }

            this.state = 525;
            this.match(PCREParser.CloseParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 527;
            this.match(PCREParser.OpenParen);
            this.state = 528;
            this.match(PCREParser.QuestionMark);
            this.state = 529;
            this.match(PCREParser.OpenParen);
            this.state = 530;
            this.match(PCREParser.RUC);
            this.state = 531;
            this.number();
            this.state = 532;
            this.match(PCREParser.CloseParen);
            this.state = 533;
            this.alternation();
            this.state = 536;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 534;
                this.match(PCREParser.Pipe);
                this.state = 535;
                this.alternation();
            }

            this.state = 538;
            this.match(PCREParser.CloseParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 540;
            this.match(PCREParser.OpenParen);
            this.state = 541;
            this.match(PCREParser.QuestionMark);
            this.state = 542;
            this.match(PCREParser.OpenParen);
            this.state = 543;
            this.match(PCREParser.RUC);
            this.state = 544;
            this.match(PCREParser.CloseParen);
            this.state = 545;
            this.alternation();
            this.state = 548;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 546;
                this.match(PCREParser.Pipe);
                this.state = 547;
                this.alternation();
            }

            this.state = 550;
            this.match(PCREParser.CloseParen);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 552;
            this.match(PCREParser.OpenParen);
            this.state = 553;
            this.match(PCREParser.QuestionMark);
            this.state = 554;
            this.match(PCREParser.OpenParen);
            this.state = 555;
            this.match(PCREParser.RUC);
            this.state = 556;
            this.match(PCREParser.Ampersand);
            this.state = 557;
            this.name();
            this.state = 558;
            this.match(PCREParser.CloseParen);
            this.state = 559;
            this.alternation();
            this.state = 562;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 560;
                this.match(PCREParser.Pipe);
                this.state = 561;
                this.alternation();
            }

            this.state = 564;
            this.match(PCREParser.CloseParen);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 566;
            this.match(PCREParser.OpenParen);
            this.state = 567;
            this.match(PCREParser.QuestionMark);
            this.state = 568;
            this.match(PCREParser.OpenParen);
            this.state = 569;
            this.match(PCREParser.DUC);
            this.state = 570;
            this.match(PCREParser.EUC);
            this.state = 571;
            this.match(PCREParser.FUC);
            this.state = 572;
            this.match(PCREParser.IUC);
            this.state = 573;
            this.match(PCREParser.NUC);
            this.state = 574;
            this.match(PCREParser.EUC);
            this.state = 575;
            this.match(PCREParser.CloseParen);
            this.state = 576;
            this.alternation();
            this.state = 579;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 577;
                this.match(PCREParser.Pipe);
                this.state = 578;
                this.alternation();
            }

            this.state = 581;
            this.match(PCREParser.CloseParen);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 583;
            this.match(PCREParser.OpenParen);
            this.state = 584;
            this.match(PCREParser.QuestionMark);
            this.state = 585;
            this.match(PCREParser.OpenParen);
            this.state = 586;
            this.match(PCREParser.ALC);
            this.state = 587;
            this.match(PCREParser.SLC);
            this.state = 588;
            this.match(PCREParser.SLC);
            this.state = 589;
            this.match(PCREParser.ELC);
            this.state = 590;
            this.match(PCREParser.RLC);
            this.state = 591;
            this.match(PCREParser.TLC);
            this.state = 592;
            this.match(PCREParser.CloseParen);
            this.state = 593;
            this.alternation();
            this.state = 596;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 594;
                this.match(PCREParser.Pipe);
                this.state = 595;
                this.alternation();
            }

            this.state = 598;
            this.match(PCREParser.CloseParen);
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 600;
            this.match(PCREParser.OpenParen);
            this.state = 601;
            this.match(PCREParser.QuestionMark);
            this.state = 602;
            this.match(PCREParser.OpenParen);
            this.state = 603;
            this.name();
            this.state = 604;
            this.match(PCREParser.CloseParen);
            this.state = 605;
            this.alternation();
            this.state = 608;
            _la = this._input.LA(1);
            if(_la===PCREParser.Pipe) {
                this.state = 606;
                this.match(PCREParser.Pipe);
                this.state = 607;
                this.alternation();
            }

            this.state = 610;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Backtrack_controlContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_backtrack_control;
    return this;
}

Backtrack_controlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Backtrack_controlContext.prototype.constructor = Backtrack_controlContext;


Backtrack_controlContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterBacktrack_control(this);
    }
};

Backtrack_controlContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitBacktrack_control(this);
    }
};




PCREParser.Backtrack_controlContext = Backtrack_controlContext;

PCREParser.prototype.backtrack_control = function() {

    var localctx = new Backtrack_controlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, PCREParser.RULE_backtrack_control);
    var _la = 0; // Token type
    try {
        this.state = 714;
        var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 614;
            this.match(PCREParser.OpenParen);
            this.state = 615;
            this.match(PCREParser.Star);
            this.state = 616;
            this.match(PCREParser.AUC);
            this.state = 617;
            this.match(PCREParser.CUC);
            this.state = 618;
            this.match(PCREParser.CUC);
            this.state = 619;
            this.match(PCREParser.EUC);
            this.state = 620;
            this.match(PCREParser.PUC);
            this.state = 621;
            this.match(PCREParser.TUC);
            this.state = 622;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 623;
            this.match(PCREParser.OpenParen);
            this.state = 624;
            this.match(PCREParser.Star);
            this.state = 625;
            this.match(PCREParser.FUC);
            this.state = 629;
            _la = this._input.LA(1);
            if(_la===PCREParser.AUC) {
                this.state = 626;
                this.match(PCREParser.AUC);
                this.state = 627;
                this.match(PCREParser.IUC);
                this.state = 628;
                this.match(PCREParser.LUC);
            }

            this.state = 631;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 632;
            this.match(PCREParser.OpenParen);
            this.state = 633;
            this.match(PCREParser.Star);
            this.state = 638;
            _la = this._input.LA(1);
            if(_la===PCREParser.MUC) {
                this.state = 634;
                this.match(PCREParser.MUC);
                this.state = 635;
                this.match(PCREParser.AUC);
                this.state = 636;
                this.match(PCREParser.RUC);
                this.state = 637;
                this.match(PCREParser.KUC);
            }

            this.state = 640;
            this.match(PCREParser.Colon);
            this.state = 641;
            this.match(PCREParser.NUC);
            this.state = 642;
            this.match(PCREParser.AUC);
            this.state = 643;
            this.match(PCREParser.MUC);
            this.state = 644;
            this.match(PCREParser.EUC);
            this.state = 645;
            this.match(PCREParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 646;
            this.match(PCREParser.OpenParen);
            this.state = 647;
            this.match(PCREParser.Star);
            this.state = 648;
            this.match(PCREParser.CUC);
            this.state = 649;
            this.match(PCREParser.OUC);
            this.state = 650;
            this.match(PCREParser.MUC);
            this.state = 651;
            this.match(PCREParser.MUC);
            this.state = 652;
            this.match(PCREParser.IUC);
            this.state = 653;
            this.match(PCREParser.TUC);
            this.state = 654;
            this.match(PCREParser.CloseParen);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 655;
            this.match(PCREParser.OpenParen);
            this.state = 656;
            this.match(PCREParser.Star);
            this.state = 657;
            this.match(PCREParser.PUC);
            this.state = 658;
            this.match(PCREParser.RUC);
            this.state = 659;
            this.match(PCREParser.UUC);
            this.state = 660;
            this.match(PCREParser.NUC);
            this.state = 661;
            this.match(PCREParser.EUC);
            this.state = 662;
            this.match(PCREParser.CloseParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 663;
            this.match(PCREParser.OpenParen);
            this.state = 664;
            this.match(PCREParser.Star);
            this.state = 665;
            this.match(PCREParser.PUC);
            this.state = 666;
            this.match(PCREParser.RUC);
            this.state = 667;
            this.match(PCREParser.UUC);
            this.state = 668;
            this.match(PCREParser.NUC);
            this.state = 669;
            this.match(PCREParser.EUC);
            this.state = 670;
            this.match(PCREParser.Colon);
            this.state = 671;
            this.match(PCREParser.NUC);
            this.state = 672;
            this.match(PCREParser.AUC);
            this.state = 673;
            this.match(PCREParser.MUC);
            this.state = 674;
            this.match(PCREParser.EUC);
            this.state = 675;
            this.match(PCREParser.CloseParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 676;
            this.match(PCREParser.OpenParen);
            this.state = 677;
            this.match(PCREParser.Star);
            this.state = 678;
            this.match(PCREParser.SUC);
            this.state = 679;
            this.match(PCREParser.KUC);
            this.state = 680;
            this.match(PCREParser.IUC);
            this.state = 681;
            this.match(PCREParser.PUC);
            this.state = 682;
            this.match(PCREParser.CloseParen);
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 683;
            this.match(PCREParser.OpenParen);
            this.state = 684;
            this.match(PCREParser.Star);
            this.state = 685;
            this.match(PCREParser.SUC);
            this.state = 686;
            this.match(PCREParser.KUC);
            this.state = 687;
            this.match(PCREParser.IUC);
            this.state = 688;
            this.match(PCREParser.PUC);
            this.state = 689;
            this.match(PCREParser.Colon);
            this.state = 690;
            this.match(PCREParser.NUC);
            this.state = 691;
            this.match(PCREParser.AUC);
            this.state = 692;
            this.match(PCREParser.MUC);
            this.state = 693;
            this.match(PCREParser.EUC);
            this.state = 694;
            this.match(PCREParser.CloseParen);
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 695;
            this.match(PCREParser.OpenParen);
            this.state = 696;
            this.match(PCREParser.Star);
            this.state = 697;
            this.match(PCREParser.TUC);
            this.state = 698;
            this.match(PCREParser.HUC);
            this.state = 699;
            this.match(PCREParser.EUC);
            this.state = 700;
            this.match(PCREParser.NUC);
            this.state = 701;
            this.match(PCREParser.CloseParen);
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 702;
            this.match(PCREParser.OpenParen);
            this.state = 703;
            this.match(PCREParser.Star);
            this.state = 704;
            this.match(PCREParser.TUC);
            this.state = 705;
            this.match(PCREParser.HUC);
            this.state = 706;
            this.match(PCREParser.EUC);
            this.state = 707;
            this.match(PCREParser.NUC);
            this.state = 708;
            this.match(PCREParser.Colon);
            this.state = 709;
            this.match(PCREParser.NUC);
            this.state = 710;
            this.match(PCREParser.AUC);
            this.state = 711;
            this.match(PCREParser.MUC);
            this.state = 712;
            this.match(PCREParser.EUC);
            this.state = 713;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Newline_conventionContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_newline_convention;
    return this;
}

Newline_conventionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Newline_conventionContext.prototype.constructor = Newline_conventionContext;


Newline_conventionContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterNewline_convention(this);
    }
};

Newline_conventionContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitNewline_convention(this);
    }
};




PCREParser.Newline_conventionContext = Newline_conventionContext;

PCREParser.prototype.newline_convention = function() {

    var localctx = new Newline_conventionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, PCREParser.RULE_newline_convention);
    try {
        this.state = 777;
        var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 716;
            this.match(PCREParser.OpenParen);
            this.state = 717;
            this.match(PCREParser.Star);
            this.state = 718;
            this.match(PCREParser.CUC);
            this.state = 719;
            this.match(PCREParser.RUC);
            this.state = 720;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 721;
            this.match(PCREParser.OpenParen);
            this.state = 722;
            this.match(PCREParser.Star);
            this.state = 723;
            this.match(PCREParser.LUC);
            this.state = 724;
            this.match(PCREParser.FUC);
            this.state = 725;
            this.match(PCREParser.CloseParen);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 726;
            this.match(PCREParser.OpenParen);
            this.state = 727;
            this.match(PCREParser.Star);
            this.state = 728;
            this.match(PCREParser.CUC);
            this.state = 729;
            this.match(PCREParser.RUC);
            this.state = 730;
            this.match(PCREParser.LUC);
            this.state = 731;
            this.match(PCREParser.FUC);
            this.state = 732;
            this.match(PCREParser.CloseParen);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 733;
            this.match(PCREParser.OpenParen);
            this.state = 734;
            this.match(PCREParser.Star);
            this.state = 735;
            this.match(PCREParser.AUC);
            this.state = 736;
            this.match(PCREParser.NUC);
            this.state = 737;
            this.match(PCREParser.YUC);
            this.state = 738;
            this.match(PCREParser.CUC);
            this.state = 739;
            this.match(PCREParser.RUC);
            this.state = 740;
            this.match(PCREParser.LUC);
            this.state = 741;
            this.match(PCREParser.FUC);
            this.state = 742;
            this.match(PCREParser.CloseParen);
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 743;
            this.match(PCREParser.OpenParen);
            this.state = 744;
            this.match(PCREParser.Star);
            this.state = 745;
            this.match(PCREParser.AUC);
            this.state = 746;
            this.match(PCREParser.NUC);
            this.state = 747;
            this.match(PCREParser.YUC);
            this.state = 748;
            this.match(PCREParser.CloseParen);
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 749;
            this.match(PCREParser.OpenParen);
            this.state = 750;
            this.match(PCREParser.Star);
            this.state = 751;
            this.match(PCREParser.BUC);
            this.state = 752;
            this.match(PCREParser.SUC);
            this.state = 753;
            this.match(PCREParser.RUC);
            this.state = 754;
            this.match(PCREParser.Underscore);
            this.state = 755;
            this.match(PCREParser.AUC);
            this.state = 756;
            this.match(PCREParser.NUC);
            this.state = 757;
            this.match(PCREParser.YUC);
            this.state = 758;
            this.match(PCREParser.CUC);
            this.state = 759;
            this.match(PCREParser.RUC);
            this.state = 760;
            this.match(PCREParser.LUC);
            this.state = 761;
            this.match(PCREParser.FUC);
            this.state = 762;
            this.match(PCREParser.CloseParen);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 763;
            this.match(PCREParser.OpenParen);
            this.state = 764;
            this.match(PCREParser.Star);
            this.state = 765;
            this.match(PCREParser.BUC);
            this.state = 766;
            this.match(PCREParser.SUC);
            this.state = 767;
            this.match(PCREParser.RUC);
            this.state = 768;
            this.match(PCREParser.Underscore);
            this.state = 769;
            this.match(PCREParser.UUC);
            this.state = 770;
            this.match(PCREParser.NUC);
            this.state = 771;
            this.match(PCREParser.IUC);
            this.state = 772;
            this.match(PCREParser.CUC);
            this.state = 773;
            this.match(PCREParser.OUC);
            this.state = 774;
            this.match(PCREParser.DUC);
            this.state = 775;
            this.match(PCREParser.EUC);
            this.state = 776;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CalloutContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_callout;
    return this;
}

CalloutContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CalloutContext.prototype.constructor = CalloutContext;

CalloutContext.prototype.number = function() {
    return this.getTypedRuleContext(NumberContext,0);
};

CalloutContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterCallout(this);
    }
};

CalloutContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitCallout(this);
    }
};




PCREParser.CalloutContext = CalloutContext;

PCREParser.prototype.callout = function() {

    var localctx = new CalloutContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, PCREParser.RULE_callout);
    try {
        this.state = 789;
        var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 779;
            this.match(PCREParser.OpenParen);
            this.state = 780;
            this.match(PCREParser.QuestionMark);
            this.state = 781;
            this.match(PCREParser.CUC);
            this.state = 782;
            this.match(PCREParser.CloseParen);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 783;
            this.match(PCREParser.OpenParen);
            this.state = 784;
            this.match(PCREParser.QuestionMark);
            this.state = 785;
            this.match(PCREParser.CUC);
            this.state = 786;
            this.number();
            this.state = 787;
            this.match(PCREParser.CloseParen);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AtomContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_atom;
    return this;
}

AtomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AtomContext.prototype.constructor = AtomContext;

AtomContext.prototype.subroutine_reference = function() {
    return this.getTypedRuleContext(Subroutine_referenceContext,0);
};

AtomContext.prototype.shared_atom = function() {
    return this.getTypedRuleContext(Shared_atomContext,0);
};

AtomContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

AtomContext.prototype.character_class = function() {
    return this.getTypedRuleContext(Character_classContext,0);
};

AtomContext.prototype.capture = function() {
    return this.getTypedRuleContext(CaptureContext,0);
};

AtomContext.prototype.non_capture = function() {
    return this.getTypedRuleContext(Non_captureContext,0);
};

AtomContext.prototype.comment = function() {
    return this.getTypedRuleContext(CommentContext,0);
};

AtomContext.prototype.option = function() {
    return this.getTypedRuleContext(OptionContext,0);
};

AtomContext.prototype.look_around = function() {
    return this.getTypedRuleContext(Look_aroundContext,0);
};

AtomContext.prototype.backreference = function() {
    return this.getTypedRuleContext(BackreferenceContext,0);
};

AtomContext.prototype.conditional = function() {
    return this.getTypedRuleContext(ConditionalContext,0);
};

AtomContext.prototype.backtrack_control = function() {
    return this.getTypedRuleContext(Backtrack_controlContext,0);
};

AtomContext.prototype.newline_convention = function() {
    return this.getTypedRuleContext(Newline_conventionContext,0);
};

AtomContext.prototype.callout = function() {
    return this.getTypedRuleContext(CalloutContext,0);
};

AtomContext.prototype.Dot = function() {
    return this.getToken(PCREParser.Dot, 0);
};

AtomContext.prototype.Caret = function() {
    return this.getToken(PCREParser.Caret, 0);
};

AtomContext.prototype.StartOfSubject = function() {
    return this.getToken(PCREParser.StartOfSubject, 0);
};

AtomContext.prototype.WordBoundary = function() {
    return this.getToken(PCREParser.WordBoundary, 0);
};

AtomContext.prototype.NonWordBoundary = function() {
    return this.getToken(PCREParser.NonWordBoundary, 0);
};

AtomContext.prototype.EndOfSubjectOrLine = function() {
    return this.getToken(PCREParser.EndOfSubjectOrLine, 0);
};

AtomContext.prototype.EndOfSubjectOrLineEndOfSubject = function() {
    return this.getToken(PCREParser.EndOfSubjectOrLineEndOfSubject, 0);
};

AtomContext.prototype.EndOfSubject = function() {
    return this.getToken(PCREParser.EndOfSubject, 0);
};

AtomContext.prototype.PreviousMatchInSubject = function() {
    return this.getToken(PCREParser.PreviousMatchInSubject, 0);
};

AtomContext.prototype.ResetStartMatch = function() {
    return this.getToken(PCREParser.ResetStartMatch, 0);
};

AtomContext.prototype.OneDataUnit = function() {
    return this.getToken(PCREParser.OneDataUnit, 0);
};

AtomContext.prototype.ExtendedUnicodeChar = function() {
    return this.getToken(PCREParser.ExtendedUnicodeChar, 0);
};

AtomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterAtom(this);
    }
};

AtomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitAtom(this);
    }
};




PCREParser.AtomContext = AtomContext;

PCREParser.prototype.atom = function() {

    var localctx = new AtomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, PCREParser.RULE_atom);
    try {
        this.state = 817;
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 791;
            this.subroutine_reference();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 792;
            this.shared_atom();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 793;
            this.literal();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 794;
            this.character_class();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 795;
            this.capture();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 796;
            this.non_capture();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 797;
            this.comment();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 798;
            this.option();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 799;
            this.look_around();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 800;
            this.backreference();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 801;
            this.conditional();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 802;
            this.backtrack_control();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 803;
            this.newline_convention();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 804;
            this.callout();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 805;
            this.match(PCREParser.Dot);
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 806;
            this.match(PCREParser.Caret);
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 807;
            this.match(PCREParser.StartOfSubject);
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 808;
            this.match(PCREParser.WordBoundary);
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 809;
            this.match(PCREParser.NonWordBoundary);
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 810;
            this.match(PCREParser.EndOfSubjectOrLine);
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 811;
            this.match(PCREParser.EndOfSubjectOrLineEndOfSubject);
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 812;
            this.match(PCREParser.EndOfSubject);
            break;

        case 23:
            this.enterOuterAlt(localctx, 23);
            this.state = 813;
            this.match(PCREParser.PreviousMatchInSubject);
            break;

        case 24:
            this.enterOuterAlt(localctx, 24);
            this.state = 814;
            this.match(PCREParser.ResetStartMatch);
            break;

        case 25:
            this.enterOuterAlt(localctx, 25);
            this.state = 815;
            this.match(PCREParser.OneDataUnit);
            break;

        case 26:
            this.enterOuterAlt(localctx, 26);
            this.state = 816;
            this.match(PCREParser.ExtendedUnicodeChar);
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cc_atomContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_cc_atom;
    return this;
}

Cc_atomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cc_atomContext.prototype.constructor = Cc_atomContext;

Cc_atomContext.prototype.cc_literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Cc_literalContext);
    } else {
        return this.getTypedRuleContext(Cc_literalContext,i);
    }
};

Cc_atomContext.prototype.Hyphen = function() {
    return this.getToken(PCREParser.Hyphen, 0);
};

Cc_atomContext.prototype.shared_atom = function() {
    return this.getTypedRuleContext(Shared_atomContext,0);
};

Cc_atomContext.prototype.backreference_or_octal = function() {
    return this.getTypedRuleContext(Backreference_or_octalContext,0);
};

Cc_atomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterCc_atom(this);
    }
};

Cc_atomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitCc_atom(this);
    }
};




PCREParser.Cc_atomContext = Cc_atomContext;

PCREParser.prototype.cc_atom = function() {

    var localctx = new Cc_atomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, PCREParser.RULE_cc_atom);
    try {
        this.state = 826;
        var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 819;
            this.cc_literal();
            this.state = 820;
            this.match(PCREParser.Hyphen);
            this.state = 821;
            this.cc_literal();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 823;
            this.shared_atom();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 824;
            this.cc_literal();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 825;
            this.backreference_or_octal();
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Shared_atomContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_shared_atom;
    return this;
}

Shared_atomContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shared_atomContext.prototype.constructor = Shared_atomContext;

Shared_atomContext.prototype.POSIXNamedSet = function() {
    return this.getToken(PCREParser.POSIXNamedSet, 0);
};

Shared_atomContext.prototype.POSIXNegatedNamedSet = function() {
    return this.getToken(PCREParser.POSIXNegatedNamedSet, 0);
};

Shared_atomContext.prototype.ControlChar = function() {
    return this.getToken(PCREParser.ControlChar, 0);
};

Shared_atomContext.prototype.DecimalDigit = function() {
    return this.getToken(PCREParser.DecimalDigit, 0);
};

Shared_atomContext.prototype.NotDecimalDigit = function() {
    return this.getToken(PCREParser.NotDecimalDigit, 0);
};

Shared_atomContext.prototype.HorizontalWhiteSpace = function() {
    return this.getToken(PCREParser.HorizontalWhiteSpace, 0);
};

Shared_atomContext.prototype.NotHorizontalWhiteSpace = function() {
    return this.getToken(PCREParser.NotHorizontalWhiteSpace, 0);
};

Shared_atomContext.prototype.NotNewLine = function() {
    return this.getToken(PCREParser.NotNewLine, 0);
};

Shared_atomContext.prototype.CharWithProperty = function() {
    return this.getToken(PCREParser.CharWithProperty, 0);
};

Shared_atomContext.prototype.CharWithoutProperty = function() {
    return this.getToken(PCREParser.CharWithoutProperty, 0);
};

Shared_atomContext.prototype.NewLineSequence = function() {
    return this.getToken(PCREParser.NewLineSequence, 0);
};

Shared_atomContext.prototype.WhiteSpace = function() {
    return this.getToken(PCREParser.WhiteSpace, 0);
};

Shared_atomContext.prototype.NotWhiteSpace = function() {
    return this.getToken(PCREParser.NotWhiteSpace, 0);
};

Shared_atomContext.prototype.VerticalWhiteSpace = function() {
    return this.getToken(PCREParser.VerticalWhiteSpace, 0);
};

Shared_atomContext.prototype.NotVerticalWhiteSpace = function() {
    return this.getToken(PCREParser.NotVerticalWhiteSpace, 0);
};

Shared_atomContext.prototype.WordChar = function() {
    return this.getToken(PCREParser.WordChar, 0);
};

Shared_atomContext.prototype.NotWordChar = function() {
    return this.getToken(PCREParser.NotWordChar, 0);
};

Shared_atomContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterShared_atom(this);
    }
};

Shared_atomContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitShared_atom(this);
    }
};




PCREParser.Shared_atomContext = Shared_atomContext;

PCREParser.prototype.shared_atom = function() {

    var localctx = new Shared_atomContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, PCREParser.RULE_shared_atom);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        _la = this._input.LA(1);
        if(!(((((_la - 4)) & ~0x1f) == 0 && ((1 << (_la - 4)) & ((1 << (PCREParser.ControlChar - 4)) | (1 << (PCREParser.DecimalDigit - 4)) | (1 << (PCREParser.NotDecimalDigit - 4)) | (1 << (PCREParser.HorizontalWhiteSpace - 4)) | (1 << (PCREParser.NotHorizontalWhiteSpace - 4)) | (1 << (PCREParser.NotNewLine - 4)) | (1 << (PCREParser.CharWithProperty - 4)) | (1 << (PCREParser.CharWithoutProperty - 4)) | (1 << (PCREParser.NewLineSequence - 4)) | (1 << (PCREParser.WhiteSpace - 4)) | (1 << (PCREParser.NotWhiteSpace - 4)) | (1 << (PCREParser.VerticalWhiteSpace - 4)) | (1 << (PCREParser.NotVerticalWhiteSpace - 4)) | (1 << (PCREParser.WordChar - 4)) | (1 << (PCREParser.NotWordChar - 4)) | (1 << (PCREParser.POSIXNamedSet - 4)) | (1 << (PCREParser.POSIXNegatedNamedSet - 4)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LiteralContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.shared_literal = function() {
    return this.getTypedRuleContext(Shared_literalContext,0);
};

LiteralContext.prototype.CharacterClassEnd = function() {
    return this.getToken(PCREParser.CharacterClassEnd, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterLiteral(this);
    }
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitLiteral(this);
    }
};




PCREParser.LiteralContext = LiteralContext;

PCREParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, PCREParser.RULE_literal);
    try {
        this.state = 832;
        switch(this._input.LA(1)) {
        case PCREParser.Quoted:
        case PCREParser.BlockQuoted:
        case PCREParser.BellChar:
        case PCREParser.EscapeChar:
        case PCREParser.FormFeed:
        case PCREParser.NewLine:
        case PCREParser.CarriageReturn:
        case PCREParser.Tab:
        case PCREParser.Backslash:
        case PCREParser.HexChar:
        case PCREParser.Hyphen:
        case PCREParser.OpenBrace:
        case PCREParser.CloseBrace:
        case PCREParser.Comma:
        case PCREParser.LessThan:
        case PCREParser.GreaterThan:
        case PCREParser.SingleQuote:
        case PCREParser.Underscore:
        case PCREParser.Colon:
        case PCREParser.Hash:
        case PCREParser.Equals:
        case PCREParser.Exclamation:
        case PCREParser.Ampersand:
        case PCREParser.ALC:
        case PCREParser.BLC:
        case PCREParser.CLC:
        case PCREParser.DLC:
        case PCREParser.ELC:
        case PCREParser.FLC:
        case PCREParser.GLC:
        case PCREParser.HLC:
        case PCREParser.ILC:
        case PCREParser.JLC:
        case PCREParser.KLC:
        case PCREParser.LLC:
        case PCREParser.MLC:
        case PCREParser.NLC:
        case PCREParser.OLC:
        case PCREParser.PLC:
        case PCREParser.QLC:
        case PCREParser.RLC:
        case PCREParser.SLC:
        case PCREParser.TLC:
        case PCREParser.ULC:
        case PCREParser.VLC:
        case PCREParser.WLC:
        case PCREParser.XLC:
        case PCREParser.YLC:
        case PCREParser.ZLC:
        case PCREParser.AUC:
        case PCREParser.BUC:
        case PCREParser.CUC:
        case PCREParser.DUC:
        case PCREParser.EUC:
        case PCREParser.FUC:
        case PCREParser.GUC:
        case PCREParser.HUC:
        case PCREParser.IUC:
        case PCREParser.JUC:
        case PCREParser.KUC:
        case PCREParser.LUC:
        case PCREParser.MUC:
        case PCREParser.NUC:
        case PCREParser.OUC:
        case PCREParser.PUC:
        case PCREParser.QUC:
        case PCREParser.RUC:
        case PCREParser.SUC:
        case PCREParser.TUC:
        case PCREParser.UUC:
        case PCREParser.VUC:
        case PCREParser.WUC:
        case PCREParser.XUC:
        case PCREParser.YUC:
        case PCREParser.ZUC:
        case PCREParser.D1:
        case PCREParser.D2:
        case PCREParser.D3:
        case PCREParser.D4:
        case PCREParser.D5:
        case PCREParser.D6:
        case PCREParser.D7:
        case PCREParser.D8:
        case PCREParser.D9:
        case PCREParser.D0:
        case PCREParser.OtherChar:
            this.enterOuterAlt(localctx, 1);
            this.state = 830;
            this.shared_literal();
            break;
        case PCREParser.CharacterClassEnd:
            this.enterOuterAlt(localctx, 2);
            this.state = 831;
            this.match(PCREParser.CharacterClassEnd);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Cc_literalContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_cc_literal;
    return this;
}

Cc_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Cc_literalContext.prototype.constructor = Cc_literalContext;

Cc_literalContext.prototype.shared_literal = function() {
    return this.getTypedRuleContext(Shared_literalContext,0);
};

Cc_literalContext.prototype.Dot = function() {
    return this.getToken(PCREParser.Dot, 0);
};

Cc_literalContext.prototype.CharacterClassStart = function() {
    return this.getToken(PCREParser.CharacterClassStart, 0);
};

Cc_literalContext.prototype.Caret = function() {
    return this.getToken(PCREParser.Caret, 0);
};

Cc_literalContext.prototype.QuestionMark = function() {
    return this.getToken(PCREParser.QuestionMark, 0);
};

Cc_literalContext.prototype.Plus = function() {
    return this.getToken(PCREParser.Plus, 0);
};

Cc_literalContext.prototype.Star = function() {
    return this.getToken(PCREParser.Star, 0);
};

Cc_literalContext.prototype.WordBoundary = function() {
    return this.getToken(PCREParser.WordBoundary, 0);
};

Cc_literalContext.prototype.EndOfSubjectOrLine = function() {
    return this.getToken(PCREParser.EndOfSubjectOrLine, 0);
};

Cc_literalContext.prototype.Pipe = function() {
    return this.getToken(PCREParser.Pipe, 0);
};

Cc_literalContext.prototype.OpenParen = function() {
    return this.getToken(PCREParser.OpenParen, 0);
};

Cc_literalContext.prototype.CloseParen = function() {
    return this.getToken(PCREParser.CloseParen, 0);
};

Cc_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterCc_literal(this);
    }
};

Cc_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitCc_literal(this);
    }
};




PCREParser.Cc_literalContext = Cc_literalContext;

PCREParser.prototype.cc_literal = function() {

    var localctx = new Cc_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, PCREParser.RULE_cc_literal);
    try {
        this.state = 846;
        switch(this._input.LA(1)) {
        case PCREParser.Quoted:
        case PCREParser.BlockQuoted:
        case PCREParser.BellChar:
        case PCREParser.EscapeChar:
        case PCREParser.FormFeed:
        case PCREParser.NewLine:
        case PCREParser.CarriageReturn:
        case PCREParser.Tab:
        case PCREParser.Backslash:
        case PCREParser.HexChar:
        case PCREParser.Hyphen:
        case PCREParser.OpenBrace:
        case PCREParser.CloseBrace:
        case PCREParser.Comma:
        case PCREParser.LessThan:
        case PCREParser.GreaterThan:
        case PCREParser.SingleQuote:
        case PCREParser.Underscore:
        case PCREParser.Colon:
        case PCREParser.Hash:
        case PCREParser.Equals:
        case PCREParser.Exclamation:
        case PCREParser.Ampersand:
        case PCREParser.ALC:
        case PCREParser.BLC:
        case PCREParser.CLC:
        case PCREParser.DLC:
        case PCREParser.ELC:
        case PCREParser.FLC:
        case PCREParser.GLC:
        case PCREParser.HLC:
        case PCREParser.ILC:
        case PCREParser.JLC:
        case PCREParser.KLC:
        case PCREParser.LLC:
        case PCREParser.MLC:
        case PCREParser.NLC:
        case PCREParser.OLC:
        case PCREParser.PLC:
        case PCREParser.QLC:
        case PCREParser.RLC:
        case PCREParser.SLC:
        case PCREParser.TLC:
        case PCREParser.ULC:
        case PCREParser.VLC:
        case PCREParser.WLC:
        case PCREParser.XLC:
        case PCREParser.YLC:
        case PCREParser.ZLC:
        case PCREParser.AUC:
        case PCREParser.BUC:
        case PCREParser.CUC:
        case PCREParser.DUC:
        case PCREParser.EUC:
        case PCREParser.FUC:
        case PCREParser.GUC:
        case PCREParser.HUC:
        case PCREParser.IUC:
        case PCREParser.JUC:
        case PCREParser.KUC:
        case PCREParser.LUC:
        case PCREParser.MUC:
        case PCREParser.NUC:
        case PCREParser.OUC:
        case PCREParser.PUC:
        case PCREParser.QUC:
        case PCREParser.RUC:
        case PCREParser.SUC:
        case PCREParser.TUC:
        case PCREParser.UUC:
        case PCREParser.VUC:
        case PCREParser.WUC:
        case PCREParser.XUC:
        case PCREParser.YUC:
        case PCREParser.ZUC:
        case PCREParser.D1:
        case PCREParser.D2:
        case PCREParser.D3:
        case PCREParser.D4:
        case PCREParser.D5:
        case PCREParser.D6:
        case PCREParser.D7:
        case PCREParser.D8:
        case PCREParser.D9:
        case PCREParser.D0:
        case PCREParser.OtherChar:
            this.enterOuterAlt(localctx, 1);
            this.state = 834;
            this.shared_literal();
            break;
        case PCREParser.Dot:
            this.enterOuterAlt(localctx, 2);
            this.state = 835;
            this.match(PCREParser.Dot);
            break;
        case PCREParser.CharacterClassStart:
            this.enterOuterAlt(localctx, 3);
            this.state = 836;
            this.match(PCREParser.CharacterClassStart);
            break;
        case PCREParser.Caret:
            this.enterOuterAlt(localctx, 4);
            this.state = 837;
            this.match(PCREParser.Caret);
            break;
        case PCREParser.QuestionMark:
            this.enterOuterAlt(localctx, 5);
            this.state = 838;
            this.match(PCREParser.QuestionMark);
            break;
        case PCREParser.Plus:
            this.enterOuterAlt(localctx, 6);
            this.state = 839;
            this.match(PCREParser.Plus);
            break;
        case PCREParser.Star:
            this.enterOuterAlt(localctx, 7);
            this.state = 840;
            this.match(PCREParser.Star);
            break;
        case PCREParser.WordBoundary:
            this.enterOuterAlt(localctx, 8);
            this.state = 841;
            this.match(PCREParser.WordBoundary);
            break;
        case PCREParser.EndOfSubjectOrLine:
            this.enterOuterAlt(localctx, 9);
            this.state = 842;
            this.match(PCREParser.EndOfSubjectOrLine);
            break;
        case PCREParser.Pipe:
            this.enterOuterAlt(localctx, 10);
            this.state = 843;
            this.match(PCREParser.Pipe);
            break;
        case PCREParser.OpenParen:
            this.enterOuterAlt(localctx, 11);
            this.state = 844;
            this.match(PCREParser.OpenParen);
            break;
        case PCREParser.CloseParen:
            this.enterOuterAlt(localctx, 12);
            this.state = 845;
            this.match(PCREParser.CloseParen);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Shared_literalContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_shared_literal;
    return this;
}

Shared_literalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Shared_literalContext.prototype.constructor = Shared_literalContext;

Shared_literalContext.prototype.octal_char = function() {
    return this.getTypedRuleContext(Octal_charContext,0);
};

Shared_literalContext.prototype.letter = function() {
    return this.getTypedRuleContext(LetterContext,0);
};

Shared_literalContext.prototype.digit = function() {
    return this.getTypedRuleContext(DigitContext,0);
};

Shared_literalContext.prototype.BellChar = function() {
    return this.getToken(PCREParser.BellChar, 0);
};

Shared_literalContext.prototype.EscapeChar = function() {
    return this.getToken(PCREParser.EscapeChar, 0);
};

Shared_literalContext.prototype.FormFeed = function() {
    return this.getToken(PCREParser.FormFeed, 0);
};

Shared_literalContext.prototype.NewLine = function() {
    return this.getToken(PCREParser.NewLine, 0);
};

Shared_literalContext.prototype.CarriageReturn = function() {
    return this.getToken(PCREParser.CarriageReturn, 0);
};

Shared_literalContext.prototype.Tab = function() {
    return this.getToken(PCREParser.Tab, 0);
};

Shared_literalContext.prototype.HexChar = function() {
    return this.getToken(PCREParser.HexChar, 0);
};

Shared_literalContext.prototype.Quoted = function() {
    return this.getToken(PCREParser.Quoted, 0);
};

Shared_literalContext.prototype.BlockQuoted = function() {
    return this.getToken(PCREParser.BlockQuoted, 0);
};

Shared_literalContext.prototype.OpenBrace = function() {
    return this.getToken(PCREParser.OpenBrace, 0);
};

Shared_literalContext.prototype.CloseBrace = function() {
    return this.getToken(PCREParser.CloseBrace, 0);
};

Shared_literalContext.prototype.Comma = function() {
    return this.getToken(PCREParser.Comma, 0);
};

Shared_literalContext.prototype.Hyphen = function() {
    return this.getToken(PCREParser.Hyphen, 0);
};

Shared_literalContext.prototype.LessThan = function() {
    return this.getToken(PCREParser.LessThan, 0);
};

Shared_literalContext.prototype.GreaterThan = function() {
    return this.getToken(PCREParser.GreaterThan, 0);
};

Shared_literalContext.prototype.SingleQuote = function() {
    return this.getToken(PCREParser.SingleQuote, 0);
};

Shared_literalContext.prototype.Underscore = function() {
    return this.getToken(PCREParser.Underscore, 0);
};

Shared_literalContext.prototype.Colon = function() {
    return this.getToken(PCREParser.Colon, 0);
};

Shared_literalContext.prototype.Hash = function() {
    return this.getToken(PCREParser.Hash, 0);
};

Shared_literalContext.prototype.Equals = function() {
    return this.getToken(PCREParser.Equals, 0);
};

Shared_literalContext.prototype.Exclamation = function() {
    return this.getToken(PCREParser.Exclamation, 0);
};

Shared_literalContext.prototype.Ampersand = function() {
    return this.getToken(PCREParser.Ampersand, 0);
};

Shared_literalContext.prototype.OtherChar = function() {
    return this.getToken(PCREParser.OtherChar, 0);
};

Shared_literalContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterShared_literal(this);
    }
};

Shared_literalContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitShared_literal(this);
    }
};




PCREParser.Shared_literalContext = Shared_literalContext;

PCREParser.prototype.shared_literal = function() {

    var localctx = new Shared_literalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, PCREParser.RULE_shared_literal);
    try {
        this.state = 874;
        switch(this._input.LA(1)) {
        case PCREParser.Backslash:
            this.enterOuterAlt(localctx, 1);
            this.state = 848;
            this.octal_char();
            break;
        case PCREParser.ALC:
        case PCREParser.BLC:
        case PCREParser.CLC:
        case PCREParser.DLC:
        case PCREParser.ELC:
        case PCREParser.FLC:
        case PCREParser.GLC:
        case PCREParser.HLC:
        case PCREParser.ILC:
        case PCREParser.JLC:
        case PCREParser.KLC:
        case PCREParser.LLC:
        case PCREParser.MLC:
        case PCREParser.NLC:
        case PCREParser.OLC:
        case PCREParser.PLC:
        case PCREParser.QLC:
        case PCREParser.RLC:
        case PCREParser.SLC:
        case PCREParser.TLC:
        case PCREParser.ULC:
        case PCREParser.VLC:
        case PCREParser.WLC:
        case PCREParser.XLC:
        case PCREParser.YLC:
        case PCREParser.ZLC:
        case PCREParser.AUC:
        case PCREParser.BUC:
        case PCREParser.CUC:
        case PCREParser.DUC:
        case PCREParser.EUC:
        case PCREParser.FUC:
        case PCREParser.GUC:
        case PCREParser.HUC:
        case PCREParser.IUC:
        case PCREParser.JUC:
        case PCREParser.KUC:
        case PCREParser.LUC:
        case PCREParser.MUC:
        case PCREParser.NUC:
        case PCREParser.OUC:
        case PCREParser.PUC:
        case PCREParser.QUC:
        case PCREParser.RUC:
        case PCREParser.SUC:
        case PCREParser.TUC:
        case PCREParser.UUC:
        case PCREParser.VUC:
        case PCREParser.WUC:
        case PCREParser.XUC:
        case PCREParser.YUC:
        case PCREParser.ZUC:
            this.enterOuterAlt(localctx, 2);
            this.state = 849;
            this.letter();
            break;
        case PCREParser.D1:
        case PCREParser.D2:
        case PCREParser.D3:
        case PCREParser.D4:
        case PCREParser.D5:
        case PCREParser.D6:
        case PCREParser.D7:
        case PCREParser.D8:
        case PCREParser.D9:
        case PCREParser.D0:
            this.enterOuterAlt(localctx, 3);
            this.state = 850;
            this.digit();
            break;
        case PCREParser.BellChar:
            this.enterOuterAlt(localctx, 4);
            this.state = 851;
            this.match(PCREParser.BellChar);
            break;
        case PCREParser.EscapeChar:
            this.enterOuterAlt(localctx, 5);
            this.state = 852;
            this.match(PCREParser.EscapeChar);
            break;
        case PCREParser.FormFeed:
            this.enterOuterAlt(localctx, 6);
            this.state = 853;
            this.match(PCREParser.FormFeed);
            break;
        case PCREParser.NewLine:
            this.enterOuterAlt(localctx, 7);
            this.state = 854;
            this.match(PCREParser.NewLine);
            break;
        case PCREParser.CarriageReturn:
            this.enterOuterAlt(localctx, 8);
            this.state = 855;
            this.match(PCREParser.CarriageReturn);
            break;
        case PCREParser.Tab:
            this.enterOuterAlt(localctx, 9);
            this.state = 856;
            this.match(PCREParser.Tab);
            break;
        case PCREParser.HexChar:
            this.enterOuterAlt(localctx, 10);
            this.state = 857;
            this.match(PCREParser.HexChar);
            break;
        case PCREParser.Quoted:
            this.enterOuterAlt(localctx, 11);
            this.state = 858;
            this.match(PCREParser.Quoted);
            break;
        case PCREParser.BlockQuoted:
            this.enterOuterAlt(localctx, 12);
            this.state = 859;
            this.match(PCREParser.BlockQuoted);
            break;
        case PCREParser.OpenBrace:
            this.enterOuterAlt(localctx, 13);
            this.state = 860;
            this.match(PCREParser.OpenBrace);
            break;
        case PCREParser.CloseBrace:
            this.enterOuterAlt(localctx, 14);
            this.state = 861;
            this.match(PCREParser.CloseBrace);
            break;
        case PCREParser.Comma:
            this.enterOuterAlt(localctx, 15);
            this.state = 862;
            this.match(PCREParser.Comma);
            break;
        case PCREParser.Hyphen:
            this.enterOuterAlt(localctx, 16);
            this.state = 863;
            this.match(PCREParser.Hyphen);
            break;
        case PCREParser.LessThan:
            this.enterOuterAlt(localctx, 17);
            this.state = 864;
            this.match(PCREParser.LessThan);
            break;
        case PCREParser.GreaterThan:
            this.enterOuterAlt(localctx, 18);
            this.state = 865;
            this.match(PCREParser.GreaterThan);
            break;
        case PCREParser.SingleQuote:
            this.enterOuterAlt(localctx, 19);
            this.state = 866;
            this.match(PCREParser.SingleQuote);
            break;
        case PCREParser.Underscore:
            this.enterOuterAlt(localctx, 20);
            this.state = 867;
            this.match(PCREParser.Underscore);
            break;
        case PCREParser.Colon:
            this.enterOuterAlt(localctx, 21);
            this.state = 868;
            this.match(PCREParser.Colon);
            break;
        case PCREParser.Hash:
            this.enterOuterAlt(localctx, 22);
            this.state = 869;
            this.match(PCREParser.Hash);
            break;
        case PCREParser.Equals:
            this.enterOuterAlt(localctx, 23);
            this.state = 870;
            this.match(PCREParser.Equals);
            break;
        case PCREParser.Exclamation:
            this.enterOuterAlt(localctx, 24);
            this.state = 871;
            this.match(PCREParser.Exclamation);
            break;
        case PCREParser.Ampersand:
            this.enterOuterAlt(localctx, 25);
            this.state = 872;
            this.match(PCREParser.Ampersand);
            break;
        case PCREParser.OtherChar:
            this.enterOuterAlt(localctx, 26);
            this.state = 873;
            this.match(PCREParser.OtherChar);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NumberContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_number;
    return this;
}

NumberContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberContext.prototype.constructor = NumberContext;

NumberContext.prototype.digits = function() {
    return this.getTypedRuleContext(DigitsContext,0);
};

NumberContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterNumber(this);
    }
};

NumberContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitNumber(this);
    }
};




PCREParser.NumberContext = NumberContext;

PCREParser.prototype.number = function() {

    var localctx = new NumberContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, PCREParser.RULE_number);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 876;
        this.digits();
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Octal_charContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_octal_char;
    return this;
}

Octal_charContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Octal_charContext.prototype.constructor = Octal_charContext;

Octal_charContext.prototype.Backslash = function() {
    return this.getToken(PCREParser.Backslash, 0);
};

Octal_charContext.prototype.octal_digit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Octal_digitContext);
    } else {
        return this.getTypedRuleContext(Octal_digitContext,i);
    }
};

Octal_charContext.prototype.D0 = function() {
    return this.getToken(PCREParser.D0, 0);
};

Octal_charContext.prototype.D1 = function() {
    return this.getToken(PCREParser.D1, 0);
};

Octal_charContext.prototype.D2 = function() {
    return this.getToken(PCREParser.D2, 0);
};

Octal_charContext.prototype.D3 = function() {
    return this.getToken(PCREParser.D3, 0);
};

Octal_charContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterOctal_char(this);
    }
};

Octal_charContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitOctal_char(this);
    }
};




PCREParser.Octal_charContext = Octal_charContext;

PCREParser.prototype.octal_char = function() {

    var localctx = new Octal_charContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, PCREParser.RULE_octal_char);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 887;
        var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
        switch(la_) {
        case 1:
            this.state = 878;
            this.match(PCREParser.Backslash);
            this.state = 879;
            _la = this._input.LA(1);
            if(!(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D0 - 115)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
                this.consume();
            }
            this.state = 880;
            this.octal_digit();
            this.state = 881;
            this.octal_digit();
            break;

        case 2:
            this.state = 883;
            this.match(PCREParser.Backslash);
            this.state = 884;
            this.octal_digit();
            this.state = 885;
            this.octal_digit();
            break;

        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Octal_digitContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_octal_digit;
    return this;
}

Octal_digitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Octal_digitContext.prototype.constructor = Octal_digitContext;

Octal_digitContext.prototype.D0 = function() {
    return this.getToken(PCREParser.D0, 0);
};

Octal_digitContext.prototype.D1 = function() {
    return this.getToken(PCREParser.D1, 0);
};

Octal_digitContext.prototype.D2 = function() {
    return this.getToken(PCREParser.D2, 0);
};

Octal_digitContext.prototype.D3 = function() {
    return this.getToken(PCREParser.D3, 0);
};

Octal_digitContext.prototype.D4 = function() {
    return this.getToken(PCREParser.D4, 0);
};

Octal_digitContext.prototype.D5 = function() {
    return this.getToken(PCREParser.D5, 0);
};

Octal_digitContext.prototype.D6 = function() {
    return this.getToken(PCREParser.D6, 0);
};

Octal_digitContext.prototype.D7 = function() {
    return this.getToken(PCREParser.D7, 0);
};

Octal_digitContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterOctal_digit(this);
    }
};

Octal_digitContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitOctal_digit(this);
    }
};




PCREParser.Octal_digitContext = Octal_digitContext;

PCREParser.prototype.octal_digit = function() {

    var localctx = new Octal_digitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, PCREParser.RULE_octal_digit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 889;
        _la = this._input.LA(1);
        if(!(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D4 - 115)) | (1 << (PCREParser.D5 - 115)) | (1 << (PCREParser.D6 - 115)) | (1 << (PCREParser.D7 - 115)) | (1 << (PCREParser.D0 - 115)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DigitsContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_digits;
    return this;
}

DigitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DigitsContext.prototype.constructor = DigitsContext;

DigitsContext.prototype.digit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DigitContext);
    } else {
        return this.getTypedRuleContext(DigitContext,i);
    }
};

DigitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterDigits(this);
    }
};

DigitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitDigits(this);
    }
};




PCREParser.DigitsContext = DigitsContext;

PCREParser.prototype.digits = function() {

    var localctx = new DigitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, PCREParser.RULE_digits);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 892;
        this._errHandler.sync(this);
        var _alt = 1;
        do {
            switch (_alt) {
            case 1:
                this.state = 891;
                this.digit();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 894;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,43, this._ctx);
        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DigitContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_digit;
    return this;
}

DigitContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DigitContext.prototype.constructor = DigitContext;

DigitContext.prototype.D0 = function() {
    return this.getToken(PCREParser.D0, 0);
};

DigitContext.prototype.D1 = function() {
    return this.getToken(PCREParser.D1, 0);
};

DigitContext.prototype.D2 = function() {
    return this.getToken(PCREParser.D2, 0);
};

DigitContext.prototype.D3 = function() {
    return this.getToken(PCREParser.D3, 0);
};

DigitContext.prototype.D4 = function() {
    return this.getToken(PCREParser.D4, 0);
};

DigitContext.prototype.D5 = function() {
    return this.getToken(PCREParser.D5, 0);
};

DigitContext.prototype.D6 = function() {
    return this.getToken(PCREParser.D6, 0);
};

DigitContext.prototype.D7 = function() {
    return this.getToken(PCREParser.D7, 0);
};

DigitContext.prototype.D8 = function() {
    return this.getToken(PCREParser.D8, 0);
};

DigitContext.prototype.D9 = function() {
    return this.getToken(PCREParser.D9, 0);
};

DigitContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterDigit(this);
    }
};

DigitContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitDigit(this);
    }
};




PCREParser.DigitContext = DigitContext;

PCREParser.prototype.digit = function() {

    var localctx = new DigitContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, PCREParser.RULE_digit);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 896;
        _la = this._input.LA(1);
        if(!(((((_la - 115)) & ~0x1f) == 0 && ((1 << (_la - 115)) & ((1 << (PCREParser.D1 - 115)) | (1 << (PCREParser.D2 - 115)) | (1 << (PCREParser.D3 - 115)) | (1 << (PCREParser.D4 - 115)) | (1 << (PCREParser.D5 - 115)) | (1 << (PCREParser.D6 - 115)) | (1 << (PCREParser.D7 - 115)) | (1 << (PCREParser.D8 - 115)) | (1 << (PCREParser.D9 - 115)) | (1 << (PCREParser.D0 - 115)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NameContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_name;
    return this;
}

NameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NameContext.prototype.constructor = NameContext;

NameContext.prototype.alpha_nums = function() {
    return this.getTypedRuleContext(Alpha_numsContext,0);
};

NameContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterName(this);
    }
};

NameContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitName(this);
    }
};




PCREParser.NameContext = NameContext;

PCREParser.prototype.name = function() {

    var localctx = new NameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, PCREParser.RULE_name);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 898;
        this.alpha_nums();
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Alpha_numsContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_alpha_nums;
    return this;
}

Alpha_numsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Alpha_numsContext.prototype.constructor = Alpha_numsContext;

Alpha_numsContext.prototype.letter = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LetterContext);
    } else {
        return this.getTypedRuleContext(LetterContext,i);
    }
};

Alpha_numsContext.prototype.Underscore = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTokens(PCREParser.Underscore);
    } else {
        return this.getToken(PCREParser.Underscore, i);
    }
};


Alpha_numsContext.prototype.digit = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DigitContext);
    } else {
        return this.getTypedRuleContext(DigitContext,i);
    }
};

Alpha_numsContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterAlpha_nums(this);
    }
};

Alpha_numsContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitAlpha_nums(this);
    }
};




PCREParser.Alpha_numsContext = Alpha_numsContext;

PCREParser.prototype.alpha_nums = function() {

    var localctx = new Alpha_numsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, PCREParser.RULE_alpha_nums);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 902;
        switch(this._input.LA(1)) {
        case PCREParser.ALC:
        case PCREParser.BLC:
        case PCREParser.CLC:
        case PCREParser.DLC:
        case PCREParser.ELC:
        case PCREParser.FLC:
        case PCREParser.GLC:
        case PCREParser.HLC:
        case PCREParser.ILC:
        case PCREParser.JLC:
        case PCREParser.KLC:
        case PCREParser.LLC:
        case PCREParser.MLC:
        case PCREParser.NLC:
        case PCREParser.OLC:
        case PCREParser.PLC:
        case PCREParser.QLC:
        case PCREParser.RLC:
        case PCREParser.SLC:
        case PCREParser.TLC:
        case PCREParser.ULC:
        case PCREParser.VLC:
        case PCREParser.WLC:
        case PCREParser.XLC:
        case PCREParser.YLC:
        case PCREParser.ZLC:
        case PCREParser.AUC:
        case PCREParser.BUC:
        case PCREParser.CUC:
        case PCREParser.DUC:
        case PCREParser.EUC:
        case PCREParser.FUC:
        case PCREParser.GUC:
        case PCREParser.HUC:
        case PCREParser.IUC:
        case PCREParser.JUC:
        case PCREParser.KUC:
        case PCREParser.LUC:
        case PCREParser.MUC:
        case PCREParser.NUC:
        case PCREParser.OUC:
        case PCREParser.PUC:
        case PCREParser.QUC:
        case PCREParser.RUC:
        case PCREParser.SUC:
        case PCREParser.TUC:
        case PCREParser.UUC:
        case PCREParser.VUC:
        case PCREParser.WUC:
        case PCREParser.XUC:
        case PCREParser.YUC:
        case PCREParser.ZUC:
            this.state = 900;
            this.letter();
            break;
        case PCREParser.Underscore:
            this.state = 901;
            this.match(PCREParser.Underscore);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 909;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 57)) & ~0x1f) == 0 && ((1 << (_la - 57)) & ((1 << (PCREParser.Underscore - 57)) | (1 << (PCREParser.ALC - 57)) | (1 << (PCREParser.BLC - 57)) | (1 << (PCREParser.CLC - 57)) | (1 << (PCREParser.DLC - 57)) | (1 << (PCREParser.ELC - 57)) | (1 << (PCREParser.FLC - 57)) | (1 << (PCREParser.GLC - 57)) | (1 << (PCREParser.HLC - 57)) | (1 << (PCREParser.ILC - 57)) | (1 << (PCREParser.JLC - 57)) | (1 << (PCREParser.KLC - 57)) | (1 << (PCREParser.LLC - 57)) | (1 << (PCREParser.MLC - 57)) | (1 << (PCREParser.NLC - 57)) | (1 << (PCREParser.OLC - 57)) | (1 << (PCREParser.PLC - 57)) | (1 << (PCREParser.QLC - 57)) | (1 << (PCREParser.RLC - 57)) | (1 << (PCREParser.SLC - 57)) | (1 << (PCREParser.TLC - 57)) | (1 << (PCREParser.ULC - 57)) | (1 << (PCREParser.VLC - 57)) | (1 << (PCREParser.WLC - 57)) | (1 << (PCREParser.XLC - 57)) | (1 << (PCREParser.YLC - 57)) | (1 << (PCREParser.ZLC - 57)))) !== 0) || ((((_la - 89)) & ~0x1f) == 0 && ((1 << (_la - 89)) & ((1 << (PCREParser.AUC - 89)) | (1 << (PCREParser.BUC - 89)) | (1 << (PCREParser.CUC - 89)) | (1 << (PCREParser.DUC - 89)) | (1 << (PCREParser.EUC - 89)) | (1 << (PCREParser.FUC - 89)) | (1 << (PCREParser.GUC - 89)) | (1 << (PCREParser.HUC - 89)) | (1 << (PCREParser.IUC - 89)) | (1 << (PCREParser.JUC - 89)) | (1 << (PCREParser.KUC - 89)) | (1 << (PCREParser.LUC - 89)) | (1 << (PCREParser.MUC - 89)) | (1 << (PCREParser.NUC - 89)) | (1 << (PCREParser.OUC - 89)) | (1 << (PCREParser.PUC - 89)) | (1 << (PCREParser.QUC - 89)) | (1 << (PCREParser.RUC - 89)) | (1 << (PCREParser.SUC - 89)) | (1 << (PCREParser.TUC - 89)) | (1 << (PCREParser.UUC - 89)) | (1 << (PCREParser.VUC - 89)) | (1 << (PCREParser.WUC - 89)) | (1 << (PCREParser.XUC - 89)) | (1 << (PCREParser.YUC - 89)) | (1 << (PCREParser.ZUC - 89)) | (1 << (PCREParser.D1 - 89)) | (1 << (PCREParser.D2 - 89)) | (1 << (PCREParser.D3 - 89)) | (1 << (PCREParser.D4 - 89)) | (1 << (PCREParser.D5 - 89)) | (1 << (PCREParser.D6 - 89)))) !== 0) || ((((_la - 121)) & ~0x1f) == 0 && ((1 << (_la - 121)) & ((1 << (PCREParser.D7 - 121)) | (1 << (PCREParser.D8 - 121)) | (1 << (PCREParser.D9 - 121)) | (1 << (PCREParser.D0 - 121)))) !== 0)) {
            this.state = 907;
            switch(this._input.LA(1)) {
            case PCREParser.ALC:
            case PCREParser.BLC:
            case PCREParser.CLC:
            case PCREParser.DLC:
            case PCREParser.ELC:
            case PCREParser.FLC:
            case PCREParser.GLC:
            case PCREParser.HLC:
            case PCREParser.ILC:
            case PCREParser.JLC:
            case PCREParser.KLC:
            case PCREParser.LLC:
            case PCREParser.MLC:
            case PCREParser.NLC:
            case PCREParser.OLC:
            case PCREParser.PLC:
            case PCREParser.QLC:
            case PCREParser.RLC:
            case PCREParser.SLC:
            case PCREParser.TLC:
            case PCREParser.ULC:
            case PCREParser.VLC:
            case PCREParser.WLC:
            case PCREParser.XLC:
            case PCREParser.YLC:
            case PCREParser.ZLC:
            case PCREParser.AUC:
            case PCREParser.BUC:
            case PCREParser.CUC:
            case PCREParser.DUC:
            case PCREParser.EUC:
            case PCREParser.FUC:
            case PCREParser.GUC:
            case PCREParser.HUC:
            case PCREParser.IUC:
            case PCREParser.JUC:
            case PCREParser.KUC:
            case PCREParser.LUC:
            case PCREParser.MUC:
            case PCREParser.NUC:
            case PCREParser.OUC:
            case PCREParser.PUC:
            case PCREParser.QUC:
            case PCREParser.RUC:
            case PCREParser.SUC:
            case PCREParser.TUC:
            case PCREParser.UUC:
            case PCREParser.VUC:
            case PCREParser.WUC:
            case PCREParser.XUC:
            case PCREParser.YUC:
            case PCREParser.ZUC:
                this.state = 904;
                this.letter();
                break;
            case PCREParser.Underscore:
                this.state = 905;
                this.match(PCREParser.Underscore);
                break;
            case PCREParser.D1:
            case PCREParser.D2:
            case PCREParser.D3:
            case PCREParser.D4:
            case PCREParser.D5:
            case PCREParser.D6:
            case PCREParser.D7:
            case PCREParser.D8:
            case PCREParser.D9:
            case PCREParser.D0:
                this.state = 906;
                this.digit();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 911;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_close_parensContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_non_close_parens;
    return this;
}

Non_close_parensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_close_parensContext.prototype.constructor = Non_close_parensContext;

Non_close_parensContext.prototype.non_close_paren = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(Non_close_parenContext);
    } else {
        return this.getTypedRuleContext(Non_close_parenContext,i);
    }
};

Non_close_parensContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterNon_close_parens(this);
    }
};

Non_close_parensContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitNon_close_parens(this);
    }
};




PCREParser.Non_close_parensContext = Non_close_parensContext;

PCREParser.prototype.non_close_parens = function() {

    var localctx = new Non_close_parensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, PCREParser.RULE_non_close_parens);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 913;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 912;
            this.non_close_paren();
            this.state = 915;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << PCREParser.Quoted) | (1 << PCREParser.BlockQuoted) | (1 << PCREParser.BellChar) | (1 << PCREParser.ControlChar) | (1 << PCREParser.EscapeChar) | (1 << PCREParser.FormFeed) | (1 << PCREParser.NewLine) | (1 << PCREParser.CarriageReturn) | (1 << PCREParser.Tab) | (1 << PCREParser.Backslash) | (1 << PCREParser.HexChar) | (1 << PCREParser.Dot) | (1 << PCREParser.OneDataUnit) | (1 << PCREParser.DecimalDigit) | (1 << PCREParser.NotDecimalDigit) | (1 << PCREParser.HorizontalWhiteSpace) | (1 << PCREParser.NotHorizontalWhiteSpace) | (1 << PCREParser.NotNewLine) | (1 << PCREParser.CharWithProperty) | (1 << PCREParser.CharWithoutProperty) | (1 << PCREParser.NewLineSequence) | (1 << PCREParser.WhiteSpace) | (1 << PCREParser.NotWhiteSpace) | (1 << PCREParser.VerticalWhiteSpace) | (1 << PCREParser.NotVerticalWhiteSpace) | (1 << PCREParser.WordChar) | (1 << PCREParser.NotWordChar) | (1 << PCREParser.ExtendedUnicodeChar) | (1 << PCREParser.CharacterClassStart) | (1 << PCREParser.CharacterClassEnd) | (1 << PCREParser.Caret))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (PCREParser.Hyphen - 32)) | (1 << (PCREParser.POSIXNamedSet - 32)) | (1 << (PCREParser.POSIXNegatedNamedSet - 32)) | (1 << (PCREParser.QuestionMark - 32)) | (1 << (PCREParser.Plus - 32)) | (1 << (PCREParser.Star - 32)) | (1 << (PCREParser.OpenBrace - 32)) | (1 << (PCREParser.CloseBrace - 32)) | (1 << (PCREParser.Comma - 32)) | (1 << (PCREParser.WordBoundary - 32)) | (1 << (PCREParser.NonWordBoundary - 32)) | (1 << (PCREParser.StartOfSubject - 32)) | (1 << (PCREParser.EndOfSubjectOrLine - 32)) | (1 << (PCREParser.EndOfSubjectOrLineEndOfSubject - 32)) | (1 << (PCREParser.EndOfSubject - 32)) | (1 << (PCREParser.PreviousMatchInSubject - 32)) | (1 << (PCREParser.ResetStartMatch - 32)) | (1 << (PCREParser.SubroutineOrNamedReferenceStartG - 32)) | (1 << (PCREParser.NamedReferenceStartK - 32)) | (1 << (PCREParser.Pipe - 32)) | (1 << (PCREParser.OpenParen - 32)) | (1 << (PCREParser.LessThan - 32)) | (1 << (PCREParser.GreaterThan - 32)) | (1 << (PCREParser.SingleQuote - 32)) | (1 << (PCREParser.Underscore - 32)) | (1 << (PCREParser.Colon - 32)) | (1 << (PCREParser.Hash - 32)) | (1 << (PCREParser.Equals - 32)) | (1 << (PCREParser.Exclamation - 32)) | (1 << (PCREParser.Ampersand - 32)) | (1 << (PCREParser.ALC - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (PCREParser.BLC - 64)) | (1 << (PCREParser.CLC - 64)) | (1 << (PCREParser.DLC - 64)) | (1 << (PCREParser.ELC - 64)) | (1 << (PCREParser.FLC - 64)) | (1 << (PCREParser.GLC - 64)) | (1 << (PCREParser.HLC - 64)) | (1 << (PCREParser.ILC - 64)) | (1 << (PCREParser.JLC - 64)) | (1 << (PCREParser.KLC - 64)) | (1 << (PCREParser.LLC - 64)) | (1 << (PCREParser.MLC - 64)) | (1 << (PCREParser.NLC - 64)) | (1 << (PCREParser.OLC - 64)) | (1 << (PCREParser.PLC - 64)) | (1 << (PCREParser.QLC - 64)) | (1 << (PCREParser.RLC - 64)) | (1 << (PCREParser.SLC - 64)) | (1 << (PCREParser.TLC - 64)) | (1 << (PCREParser.ULC - 64)) | (1 << (PCREParser.VLC - 64)) | (1 << (PCREParser.WLC - 64)) | (1 << (PCREParser.XLC - 64)) | (1 << (PCREParser.YLC - 64)) | (1 << (PCREParser.ZLC - 64)) | (1 << (PCREParser.AUC - 64)) | (1 << (PCREParser.BUC - 64)) | (1 << (PCREParser.CUC - 64)) | (1 << (PCREParser.DUC - 64)) | (1 << (PCREParser.EUC - 64)) | (1 << (PCREParser.FUC - 64)) | (1 << (PCREParser.GUC - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (PCREParser.HUC - 96)) | (1 << (PCREParser.IUC - 96)) | (1 << (PCREParser.JUC - 96)) | (1 << (PCREParser.KUC - 96)) | (1 << (PCREParser.LUC - 96)) | (1 << (PCREParser.MUC - 96)) | (1 << (PCREParser.NUC - 96)) | (1 << (PCREParser.OUC - 96)) | (1 << (PCREParser.PUC - 96)) | (1 << (PCREParser.QUC - 96)) | (1 << (PCREParser.RUC - 96)) | (1 << (PCREParser.SUC - 96)) | (1 << (PCREParser.TUC - 96)) | (1 << (PCREParser.UUC - 96)) | (1 << (PCREParser.VUC - 96)) | (1 << (PCREParser.WUC - 96)) | (1 << (PCREParser.XUC - 96)) | (1 << (PCREParser.YUC - 96)) | (1 << (PCREParser.ZUC - 96)) | (1 << (PCREParser.D1 - 96)) | (1 << (PCREParser.D2 - 96)) | (1 << (PCREParser.D3 - 96)) | (1 << (PCREParser.D4 - 96)) | (1 << (PCREParser.D5 - 96)) | (1 << (PCREParser.D6 - 96)) | (1 << (PCREParser.D7 - 96)) | (1 << (PCREParser.D8 - 96)) | (1 << (PCREParser.D9 - 96)) | (1 << (PCREParser.D0 - 96)) | (1 << (PCREParser.OtherChar - 96)))) !== 0));
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Non_close_parenContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_non_close_paren;
    return this;
}

Non_close_parenContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Non_close_parenContext.prototype.constructor = Non_close_parenContext;

Non_close_parenContext.prototype.CloseParen = function() {
    return this.getToken(PCREParser.CloseParen, 0);
};

Non_close_parenContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterNon_close_paren(this);
    }
};

Non_close_parenContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitNon_close_paren(this);
    }
};




PCREParser.Non_close_parenContext = Non_close_parenContext;

PCREParser.prototype.non_close_paren = function() {

    var localctx = new Non_close_parenContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, PCREParser.RULE_non_close_paren);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 917;
        _la = this._input.LA(1);
        if(_la<=0 || _la===PCREParser.CloseParen) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LetterContext(parser, parent, invokingState) {
    if(parent===undefined) {
        parent = null;
    }
    if(invokingState===undefined || invokingState===null) {
        invokingState = -1;
    }
    antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = PCREParser.RULE_letter;
    return this;
}

LetterContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LetterContext.prototype.constructor = LetterContext;

LetterContext.prototype.ALC = function() {
    return this.getToken(PCREParser.ALC, 0);
};

LetterContext.prototype.BLC = function() {
    return this.getToken(PCREParser.BLC, 0);
};

LetterContext.prototype.CLC = function() {
    return this.getToken(PCREParser.CLC, 0);
};

LetterContext.prototype.DLC = function() {
    return this.getToken(PCREParser.DLC, 0);
};

LetterContext.prototype.ELC = function() {
    return this.getToken(PCREParser.ELC, 0);
};

LetterContext.prototype.FLC = function() {
    return this.getToken(PCREParser.FLC, 0);
};

LetterContext.prototype.GLC = function() {
    return this.getToken(PCREParser.GLC, 0);
};

LetterContext.prototype.HLC = function() {
    return this.getToken(PCREParser.HLC, 0);
};

LetterContext.prototype.ILC = function() {
    return this.getToken(PCREParser.ILC, 0);
};

LetterContext.prototype.JLC = function() {
    return this.getToken(PCREParser.JLC, 0);
};

LetterContext.prototype.KLC = function() {
    return this.getToken(PCREParser.KLC, 0);
};

LetterContext.prototype.LLC = function() {
    return this.getToken(PCREParser.LLC, 0);
};

LetterContext.prototype.MLC = function() {
    return this.getToken(PCREParser.MLC, 0);
};

LetterContext.prototype.NLC = function() {
    return this.getToken(PCREParser.NLC, 0);
};

LetterContext.prototype.OLC = function() {
    return this.getToken(PCREParser.OLC, 0);
};

LetterContext.prototype.PLC = function() {
    return this.getToken(PCREParser.PLC, 0);
};

LetterContext.prototype.QLC = function() {
    return this.getToken(PCREParser.QLC, 0);
};

LetterContext.prototype.RLC = function() {
    return this.getToken(PCREParser.RLC, 0);
};

LetterContext.prototype.SLC = function() {
    return this.getToken(PCREParser.SLC, 0);
};

LetterContext.prototype.TLC = function() {
    return this.getToken(PCREParser.TLC, 0);
};

LetterContext.prototype.ULC = function() {
    return this.getToken(PCREParser.ULC, 0);
};

LetterContext.prototype.VLC = function() {
    return this.getToken(PCREParser.VLC, 0);
};

LetterContext.prototype.WLC = function() {
    return this.getToken(PCREParser.WLC, 0);
};

LetterContext.prototype.XLC = function() {
    return this.getToken(PCREParser.XLC, 0);
};

LetterContext.prototype.YLC = function() {
    return this.getToken(PCREParser.YLC, 0);
};

LetterContext.prototype.ZLC = function() {
    return this.getToken(PCREParser.ZLC, 0);
};

LetterContext.prototype.AUC = function() {
    return this.getToken(PCREParser.AUC, 0);
};

LetterContext.prototype.BUC = function() {
    return this.getToken(PCREParser.BUC, 0);
};

LetterContext.prototype.CUC = function() {
    return this.getToken(PCREParser.CUC, 0);
};

LetterContext.prototype.DUC = function() {
    return this.getToken(PCREParser.DUC, 0);
};

LetterContext.prototype.EUC = function() {
    return this.getToken(PCREParser.EUC, 0);
};

LetterContext.prototype.FUC = function() {
    return this.getToken(PCREParser.FUC, 0);
};

LetterContext.prototype.GUC = function() {
    return this.getToken(PCREParser.GUC, 0);
};

LetterContext.prototype.HUC = function() {
    return this.getToken(PCREParser.HUC, 0);
};

LetterContext.prototype.IUC = function() {
    return this.getToken(PCREParser.IUC, 0);
};

LetterContext.prototype.JUC = function() {
    return this.getToken(PCREParser.JUC, 0);
};

LetterContext.prototype.KUC = function() {
    return this.getToken(PCREParser.KUC, 0);
};

LetterContext.prototype.LUC = function() {
    return this.getToken(PCREParser.LUC, 0);
};

LetterContext.prototype.MUC = function() {
    return this.getToken(PCREParser.MUC, 0);
};

LetterContext.prototype.NUC = function() {
    return this.getToken(PCREParser.NUC, 0);
};

LetterContext.prototype.OUC = function() {
    return this.getToken(PCREParser.OUC, 0);
};

LetterContext.prototype.PUC = function() {
    return this.getToken(PCREParser.PUC, 0);
};

LetterContext.prototype.QUC = function() {
    return this.getToken(PCREParser.QUC, 0);
};

LetterContext.prototype.RUC = function() {
    return this.getToken(PCREParser.RUC, 0);
};

LetterContext.prototype.SUC = function() {
    return this.getToken(PCREParser.SUC, 0);
};

LetterContext.prototype.TUC = function() {
    return this.getToken(PCREParser.TUC, 0);
};

LetterContext.prototype.UUC = function() {
    return this.getToken(PCREParser.UUC, 0);
};

LetterContext.prototype.VUC = function() {
    return this.getToken(PCREParser.VUC, 0);
};

LetterContext.prototype.WUC = function() {
    return this.getToken(PCREParser.WUC, 0);
};

LetterContext.prototype.XUC = function() {
    return this.getToken(PCREParser.XUC, 0);
};

LetterContext.prototype.YUC = function() {
    return this.getToken(PCREParser.YUC, 0);
};

LetterContext.prototype.ZUC = function() {
    return this.getToken(PCREParser.ZUC, 0);
};

LetterContext.prototype.enterRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.enterLetter(this);
    }
};

LetterContext.prototype.exitRule = function(listener) {
    if(listener instanceof PCREListener ) {
        listener.exitLetter(this);
    }
};




PCREParser.LetterContext = LetterContext;

PCREParser.prototype.letter = function() {

    var localctx = new LetterContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, PCREParser.RULE_letter);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 919;
        _la = this._input.LA(1);
        if(!(((((_la - 63)) & ~0x1f) == 0 && ((1 << (_la - 63)) & ((1 << (PCREParser.ALC - 63)) | (1 << (PCREParser.BLC - 63)) | (1 << (PCREParser.CLC - 63)) | (1 << (PCREParser.DLC - 63)) | (1 << (PCREParser.ELC - 63)) | (1 << (PCREParser.FLC - 63)) | (1 << (PCREParser.GLC - 63)) | (1 << (PCREParser.HLC - 63)) | (1 << (PCREParser.ILC - 63)) | (1 << (PCREParser.JLC - 63)) | (1 << (PCREParser.KLC - 63)) | (1 << (PCREParser.LLC - 63)) | (1 << (PCREParser.MLC - 63)) | (1 << (PCREParser.NLC - 63)) | (1 << (PCREParser.OLC - 63)) | (1 << (PCREParser.PLC - 63)) | (1 << (PCREParser.QLC - 63)) | (1 << (PCREParser.RLC - 63)) | (1 << (PCREParser.SLC - 63)) | (1 << (PCREParser.TLC - 63)) | (1 << (PCREParser.ULC - 63)) | (1 << (PCREParser.VLC - 63)) | (1 << (PCREParser.WLC - 63)) | (1 << (PCREParser.XLC - 63)) | (1 << (PCREParser.YLC - 63)) | (1 << (PCREParser.ZLC - 63)) | (1 << (PCREParser.AUC - 63)) | (1 << (PCREParser.BUC - 63)) | (1 << (PCREParser.CUC - 63)) | (1 << (PCREParser.DUC - 63)) | (1 << (PCREParser.EUC - 63)) | (1 << (PCREParser.FUC - 63)))) !== 0) || ((((_la - 95)) & ~0x1f) == 0 && ((1 << (_la - 95)) & ((1 << (PCREParser.GUC - 95)) | (1 << (PCREParser.HUC - 95)) | (1 << (PCREParser.IUC - 95)) | (1 << (PCREParser.JUC - 95)) | (1 << (PCREParser.KUC - 95)) | (1 << (PCREParser.LUC - 95)) | (1 << (PCREParser.MUC - 95)) | (1 << (PCREParser.NUC - 95)) | (1 << (PCREParser.OUC - 95)) | (1 << (PCREParser.PUC - 95)) | (1 << (PCREParser.QUC - 95)) | (1 << (PCREParser.RUC - 95)) | (1 << (PCREParser.SUC - 95)) | (1 << (PCREParser.TUC - 95)) | (1 << (PCREParser.UUC - 95)) | (1 << (PCREParser.VUC - 95)) | (1 << (PCREParser.WUC - 95)) | (1 << (PCREParser.XUC - 95)) | (1 << (PCREParser.YUC - 95)) | (1 << (PCREParser.ZUC - 95)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
            this.consume();
        }
    } catch (re) {
        if(re instanceof antlr4.error.RecognitionException) {
            localctx.exception = re;
            this._errHandler.reportError(this, re);
            this._errHandler.recover(this, re);
        } else {
            throw re;
        }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.PCREParser = PCREParser;
